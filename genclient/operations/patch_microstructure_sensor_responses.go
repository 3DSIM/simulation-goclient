// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// PatchMicrostructureSensorReader is a Reader for the PatchMicrostructureSensor structure.
type PatchMicrostructureSensorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchMicrostructureSensorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchMicrostructureSensorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewPatchMicrostructureSensorUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPatchMicrostructureSensorForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchMicrostructureSensorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchMicrostructureSensorDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchMicrostructureSensorOK creates a PatchMicrostructureSensorOK with default headers values
func NewPatchMicrostructureSensorOK() *PatchMicrostructureSensorOK {
	return &PatchMicrostructureSensorOK{}
}

/*PatchMicrostructureSensorOK handles this case with default header values.

Patched microstructure sensor
*/
type PatchMicrostructureSensorOK struct {
	Payload *models.MicrostructureSensor
}

func (o *PatchMicrostructureSensorOK) Error() string {
	return fmt.Sprintf("[PATCH /microstructuresimulations/{id}/sensors/{sensorId}][%d] patchMicrostructureSensorOK  %+v", 200, o.Payload)
}

func (o *PatchMicrostructureSensorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MicrostructureSensor)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchMicrostructureSensorUnauthorized creates a PatchMicrostructureSensorUnauthorized with default headers values
func NewPatchMicrostructureSensorUnauthorized() *PatchMicrostructureSensorUnauthorized {
	return &PatchMicrostructureSensorUnauthorized{}
}

/*PatchMicrostructureSensorUnauthorized handles this case with default header values.

Not authorized
*/
type PatchMicrostructureSensorUnauthorized struct {
	Payload *models.Error
}

func (o *PatchMicrostructureSensorUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /microstructuresimulations/{id}/sensors/{sensorId}][%d] patchMicrostructureSensorUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchMicrostructureSensorUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchMicrostructureSensorForbidden creates a PatchMicrostructureSensorForbidden with default headers values
func NewPatchMicrostructureSensorForbidden() *PatchMicrostructureSensorForbidden {
	return &PatchMicrostructureSensorForbidden{}
}

/*PatchMicrostructureSensorForbidden handles this case with default header values.

Forbidden
*/
type PatchMicrostructureSensorForbidden struct {
	Payload *models.Error
}

func (o *PatchMicrostructureSensorForbidden) Error() string {
	return fmt.Sprintf("[PATCH /microstructuresimulations/{id}/sensors/{sensorId}][%d] patchMicrostructureSensorForbidden  %+v", 403, o.Payload)
}

func (o *PatchMicrostructureSensorForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchMicrostructureSensorNotFound creates a PatchMicrostructureSensorNotFound with default headers values
func NewPatchMicrostructureSensorNotFound() *PatchMicrostructureSensorNotFound {
	return &PatchMicrostructureSensorNotFound{}
}

/*PatchMicrostructureSensorNotFound handles this case with default header values.

Microstructure Sensor not found (sensorId invalid)
*/
type PatchMicrostructureSensorNotFound struct {
	Payload *models.Error
}

func (o *PatchMicrostructureSensorNotFound) Error() string {
	return fmt.Sprintf("[PATCH /microstructuresimulations/{id}/sensors/{sensorId}][%d] patchMicrostructureSensorNotFound  %+v", 404, o.Payload)
}

func (o *PatchMicrostructureSensorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchMicrostructureSensorDefault creates a PatchMicrostructureSensorDefault with default headers values
func NewPatchMicrostructureSensorDefault(code int) *PatchMicrostructureSensorDefault {
	return &PatchMicrostructureSensorDefault{
		_statusCode: code,
	}
}

/*PatchMicrostructureSensorDefault handles this case with default header values.

unexpected error
*/
type PatchMicrostructureSensorDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the patch microstructure sensor default response
func (o *PatchMicrostructureSensorDefault) Code() int {
	return o._statusCode
}

func (o *PatchMicrostructureSensorDefault) Error() string {
	return fmt.Sprintf("[PATCH /microstructuresimulations/{id}/sensors/{sensorId}][%d] patchMicrostructureSensor default  %+v", o._statusCode, o.Payload)
}

func (o *PatchMicrostructureSensorDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
