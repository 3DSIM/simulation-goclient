// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// NewPostPorositySimulationParams creates a new PostPorositySimulationParams object
// with the default values initialized.
func NewPostPorositySimulationParams() *PostPorositySimulationParams {
	var ()
	return &PostPorositySimulationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostPorositySimulationParamsWithTimeout creates a new PostPorositySimulationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostPorositySimulationParamsWithTimeout(timeout time.Duration) *PostPorositySimulationParams {
	var ()
	return &PostPorositySimulationParams{

		timeout: timeout,
	}
}

// NewPostPorositySimulationParamsWithContext creates a new PostPorositySimulationParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostPorositySimulationParamsWithContext(ctx context.Context) *PostPorositySimulationParams {
	var ()
	return &PostPorositySimulationParams{

		Context: ctx,
	}
}

// NewPostPorositySimulationParamsWithHTTPClient creates a new PostPorositySimulationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostPorositySimulationParamsWithHTTPClient(client *http.Client) *PostPorositySimulationParams {
	var ()
	return &PostPorositySimulationParams{
		HTTPClient: client,
	}
}

/*PostPorositySimulationParams contains all the parameters to send to the API endpoint
for the post porosity simulation operation typically these are written to a http.Request
*/
type PostPorositySimulationParams struct {

	/*PorositySimulation
	  PorositySimulation fields required to add the simulation

	*/
	PorositySimulation *models.PorositySimulation

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post porosity simulation params
func (o *PostPorositySimulationParams) WithTimeout(timeout time.Duration) *PostPorositySimulationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post porosity simulation params
func (o *PostPorositySimulationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post porosity simulation params
func (o *PostPorositySimulationParams) WithContext(ctx context.Context) *PostPorositySimulationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post porosity simulation params
func (o *PostPorositySimulationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post porosity simulation params
func (o *PostPorositySimulationParams) WithHTTPClient(client *http.Client) *PostPorositySimulationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post porosity simulation params
func (o *PostPorositySimulationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPorositySimulation adds the porositySimulation to the post porosity simulation params
func (o *PostPorositySimulationParams) WithPorositySimulation(porositySimulation *models.PorositySimulation) *PostPorositySimulationParams {
	o.SetPorositySimulation(porositySimulation)
	return o
}

// SetPorositySimulation adds the porositySimulation to the post porosity simulation params
func (o *PostPorositySimulationParams) SetPorositySimulation(porositySimulation *models.PorositySimulation) {
	o.PorositySimulation = porositySimulation
}

// WriteToRequest writes these params to a swagger request
func (o *PostPorositySimulationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PorositySimulation != nil {
		if err := r.SetBodyParam(o.PorositySimulation); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
