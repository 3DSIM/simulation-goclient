// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// PatchActivityReader is a Reader for the PatchActivity structure.
type PatchActivityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchActivityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchActivityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewPatchActivityUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPatchActivityForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchActivityNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchActivityDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchActivityOK creates a PatchActivityOK with default headers values
func NewPatchActivityOK() *PatchActivityOK {
	return &PatchActivityOK{}
}

/*PatchActivityOK handles this case with default header values.

Successfully patched activity
*/
type PatchActivityOK struct {
	Payload *models.SimulationActivity
}

func (o *PatchActivityOK) Error() string {
	return fmt.Sprintf("[PATCH /simulations/{id}/activities/{activityId}][%d] patchActivityOK  %+v", 200, o.Payload)
}

func (o *PatchActivityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SimulationActivity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchActivityUnauthorized creates a PatchActivityUnauthorized with default headers values
func NewPatchActivityUnauthorized() *PatchActivityUnauthorized {
	return &PatchActivityUnauthorized{}
}

/*PatchActivityUnauthorized handles this case with default header values.

Not authorized
*/
type PatchActivityUnauthorized struct {
	Payload *models.Error
}

func (o *PatchActivityUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /simulations/{id}/activities/{activityId}][%d] patchActivityUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchActivityUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchActivityForbidden creates a PatchActivityForbidden with default headers values
func NewPatchActivityForbidden() *PatchActivityForbidden {
	return &PatchActivityForbidden{}
}

/*PatchActivityForbidden handles this case with default header values.

Forbidden
*/
type PatchActivityForbidden struct {
	Payload *models.Error
}

func (o *PatchActivityForbidden) Error() string {
	return fmt.Sprintf("[PATCH /simulations/{id}/activities/{activityId}][%d] patchActivityForbidden  %+v", 403, o.Payload)
}

func (o *PatchActivityForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchActivityNotFound creates a PatchActivityNotFound with default headers values
func NewPatchActivityNotFound() *PatchActivityNotFound {
	return &PatchActivityNotFound{}
}

/*PatchActivityNotFound handles this case with default header values.

Simulation activity not found (id invalid)
*/
type PatchActivityNotFound struct {
	Payload *models.Error
}

func (o *PatchActivityNotFound) Error() string {
	return fmt.Sprintf("[PATCH /simulations/{id}/activities/{activityId}][%d] patchActivityNotFound  %+v", 404, o.Payload)
}

func (o *PatchActivityNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchActivityDefault creates a PatchActivityDefault with default headers values
func NewPatchActivityDefault(code int) *PatchActivityDefault {
	return &PatchActivityDefault{
		_statusCode: code,
	}
}

/*PatchActivityDefault handles this case with default header values.

unexpected error
*/
type PatchActivityDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the patch activity default response
func (o *PatchActivityDefault) Code() int {
	return o._statusCode
}

func (o *PatchActivityDefault) Error() string {
	return fmt.Sprintf("[PATCH /simulations/{id}/activities/{activityId}][%d] patchActivity default  %+v", o._statusCode, o.Payload)
}

func (o *PatchActivityDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
