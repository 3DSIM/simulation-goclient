// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// CancelThermalSimulationReader is a Reader for the CancelThermalSimulation structure.
type CancelThermalSimulationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelThermalSimulationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCancelThermalSimulationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewCancelThermalSimulationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCancelThermalSimulationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCancelThermalSimulationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCancelThermalSimulationDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCancelThermalSimulationOK creates a CancelThermalSimulationOK with default headers values
func NewCancelThermalSimulationOK() *CancelThermalSimulationOK {
	return &CancelThermalSimulationOK{}
}

/*CancelThermalSimulationOK handles this case with default header values.

Simulation was successfully cancelled.
*/
type CancelThermalSimulationOK struct {
}

func (o *CancelThermalSimulationOK) Error() string {
	return fmt.Sprintf("[PUT /thermalsimulations/{id}/cancel][%d] cancelThermalSimulationOK ", 200)
}

func (o *CancelThermalSimulationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCancelThermalSimulationUnauthorized creates a CancelThermalSimulationUnauthorized with default headers values
func NewCancelThermalSimulationUnauthorized() *CancelThermalSimulationUnauthorized {
	return &CancelThermalSimulationUnauthorized{}
}

/*CancelThermalSimulationUnauthorized handles this case with default header values.

Not authorized
*/
type CancelThermalSimulationUnauthorized struct {
	Payload *models.Error
}

func (o *CancelThermalSimulationUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /thermalsimulations/{id}/cancel][%d] cancelThermalSimulationUnauthorized  %+v", 401, o.Payload)
}

func (o *CancelThermalSimulationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelThermalSimulationForbidden creates a CancelThermalSimulationForbidden with default headers values
func NewCancelThermalSimulationForbidden() *CancelThermalSimulationForbidden {
	return &CancelThermalSimulationForbidden{}
}

/*CancelThermalSimulationForbidden handles this case with default header values.

Forbidden
*/
type CancelThermalSimulationForbidden struct {
	Payload *models.Error
}

func (o *CancelThermalSimulationForbidden) Error() string {
	return fmt.Sprintf("[PUT /thermalsimulations/{id}/cancel][%d] cancelThermalSimulationForbidden  %+v", 403, o.Payload)
}

func (o *CancelThermalSimulationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelThermalSimulationNotFound creates a CancelThermalSimulationNotFound with default headers values
func NewCancelThermalSimulationNotFound() *CancelThermalSimulationNotFound {
	return &CancelThermalSimulationNotFound{}
}

/*CancelThermalSimulationNotFound handles this case with default header values.

Simulation not found (id invalid)
*/
type CancelThermalSimulationNotFound struct {
	Payload *models.Error
}

func (o *CancelThermalSimulationNotFound) Error() string {
	return fmt.Sprintf("[PUT /thermalsimulations/{id}/cancel][%d] cancelThermalSimulationNotFound  %+v", 404, o.Payload)
}

func (o *CancelThermalSimulationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelThermalSimulationDefault creates a CancelThermalSimulationDefault with default headers values
func NewCancelThermalSimulationDefault(code int) *CancelThermalSimulationDefault {
	return &CancelThermalSimulationDefault{
		_statusCode: code,
	}
}

/*CancelThermalSimulationDefault handles this case with default header values.

unexpected error
*/
type CancelThermalSimulationDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the cancel thermal simulation default response
func (o *CancelThermalSimulationDefault) Code() int {
	return o._statusCode
}

func (o *CancelThermalSimulationDefault) Error() string {
	return fmt.Sprintf("[PUT /thermalsimulations/{id}/cancel][%d] cancelThermalSimulation default  %+v", o._statusCode, o.Payload)
}

func (o *CancelThermalSimulationDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
