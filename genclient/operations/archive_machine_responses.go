// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// ArchiveMachineReader is a Reader for the ArchiveMachine structure.
type ArchiveMachineReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ArchiveMachineReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewArchiveMachineOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewArchiveMachineUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewArchiveMachineForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewArchiveMachineNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewArchiveMachineDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewArchiveMachineOK creates a ArchiveMachineOK with default headers values
func NewArchiveMachineOK() *ArchiveMachineOK {
	return &ArchiveMachineOK{}
}

/*ArchiveMachineOK handles this case with default header values.

Machine was successfully archived.
*/
type ArchiveMachineOK struct {
	Payload *models.Machine
}

func (o *ArchiveMachineOK) Error() string {
	return fmt.Sprintf("[PUT /machines/{id}/archive][%d] archiveMachineOK  %+v", 200, o.Payload)
}

func (o *ArchiveMachineOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Machine)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArchiveMachineUnauthorized creates a ArchiveMachineUnauthorized with default headers values
func NewArchiveMachineUnauthorized() *ArchiveMachineUnauthorized {
	return &ArchiveMachineUnauthorized{}
}

/*ArchiveMachineUnauthorized handles this case with default header values.

Not authorized
*/
type ArchiveMachineUnauthorized struct {
	Payload *models.Error
}

func (o *ArchiveMachineUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /machines/{id}/archive][%d] archiveMachineUnauthorized  %+v", 401, o.Payload)
}

func (o *ArchiveMachineUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArchiveMachineForbidden creates a ArchiveMachineForbidden with default headers values
func NewArchiveMachineForbidden() *ArchiveMachineForbidden {
	return &ArchiveMachineForbidden{}
}

/*ArchiveMachineForbidden handles this case with default header values.

Forbidden
*/
type ArchiveMachineForbidden struct {
	Payload *models.Error
}

func (o *ArchiveMachineForbidden) Error() string {
	return fmt.Sprintf("[PUT /machines/{id}/archive][%d] archiveMachineForbidden  %+v", 403, o.Payload)
}

func (o *ArchiveMachineForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArchiveMachineNotFound creates a ArchiveMachineNotFound with default headers values
func NewArchiveMachineNotFound() *ArchiveMachineNotFound {
	return &ArchiveMachineNotFound{}
}

/*ArchiveMachineNotFound handles this case with default header values.

Machine not found (id invalid)
*/
type ArchiveMachineNotFound struct {
}

func (o *ArchiveMachineNotFound) Error() string {
	return fmt.Sprintf("[PUT /machines/{id}/archive][%d] archiveMachineNotFound ", 404)
}

func (o *ArchiveMachineNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewArchiveMachineDefault creates a ArchiveMachineDefault with default headers values
func NewArchiveMachineDefault(code int) *ArchiveMachineDefault {
	return &ArchiveMachineDefault{
		_statusCode: code,
	}
}

/*ArchiveMachineDefault handles this case with default header values.

unexpected error
*/
type ArchiveMachineDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the archive machine default response
func (o *ArchiveMachineDefault) Code() int {
	return o._statusCode
}

func (o *ArchiveMachineDefault) Error() string {
	return fmt.Sprintf("[PUT /machines/{id}/archive][%d] archiveMachine default  %+v", o._statusCode, o.Payload)
}

func (o *ArchiveMachineDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
