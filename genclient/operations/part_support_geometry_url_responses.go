// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// PartSupportGeometryURLReader is a Reader for the PartSupportGeometryURL structure.
type PartSupportGeometryURLReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PartSupportGeometryURLReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPartSupportGeometryURLOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewPartSupportGeometryURLUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPartSupportGeometryURLForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPartSupportGeometryURLNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPartSupportGeometryURLDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPartSupportGeometryURLOK creates a PartSupportGeometryURLOK with default headers values
func NewPartSupportGeometryURLOK() *PartSupportGeometryURLOK {
	return &PartSupportGeometryURLOK{}
}

/*PartSupportGeometryURLOK handles this case with default header values.

Successfully returns a support geometry url
*/
type PartSupportGeometryURLOK struct {
	Payload *models.PartGeometryURL
}

func (o *PartSupportGeometryURLOK) Error() string {
	return fmt.Sprintf("[GET /parts/{partId}/supports/{supportId}/geometryurl][%d] partSupportGeometryUrlOK  %+v", 200, o.Payload)
}

func (o *PartSupportGeometryURLOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PartGeometryURL)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPartSupportGeometryURLUnauthorized creates a PartSupportGeometryURLUnauthorized with default headers values
func NewPartSupportGeometryURLUnauthorized() *PartSupportGeometryURLUnauthorized {
	return &PartSupportGeometryURLUnauthorized{}
}

/*PartSupportGeometryURLUnauthorized handles this case with default header values.

Not authorized
*/
type PartSupportGeometryURLUnauthorized struct {
	Payload *models.Error
}

func (o *PartSupportGeometryURLUnauthorized) Error() string {
	return fmt.Sprintf("[GET /parts/{partId}/supports/{supportId}/geometryurl][%d] partSupportGeometryUrlUnauthorized  %+v", 401, o.Payload)
}

func (o *PartSupportGeometryURLUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPartSupportGeometryURLForbidden creates a PartSupportGeometryURLForbidden with default headers values
func NewPartSupportGeometryURLForbidden() *PartSupportGeometryURLForbidden {
	return &PartSupportGeometryURLForbidden{}
}

/*PartSupportGeometryURLForbidden handles this case with default header values.

Forbidden
*/
type PartSupportGeometryURLForbidden struct {
	Payload *models.Error
}

func (o *PartSupportGeometryURLForbidden) Error() string {
	return fmt.Sprintf("[GET /parts/{partId}/supports/{supportId}/geometryurl][%d] partSupportGeometryUrlForbidden  %+v", 403, o.Payload)
}

func (o *PartSupportGeometryURLForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPartSupportGeometryURLNotFound creates a PartSupportGeometryURLNotFound with default headers values
func NewPartSupportGeometryURLNotFound() *PartSupportGeometryURLNotFound {
	return &PartSupportGeometryURLNotFound{}
}

/*PartSupportGeometryURLNotFound handles this case with default header values.

Not Found
*/
type PartSupportGeometryURLNotFound struct {
}

func (o *PartSupportGeometryURLNotFound) Error() string {
	return fmt.Sprintf("[GET /parts/{partId}/supports/{supportId}/geometryurl][%d] partSupportGeometryUrlNotFound ", 404)
}

func (o *PartSupportGeometryURLNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPartSupportGeometryURLDefault creates a PartSupportGeometryURLDefault with default headers values
func NewPartSupportGeometryURLDefault(code int) *PartSupportGeometryURLDefault {
	return &PartSupportGeometryURLDefault{
		_statusCode: code,
	}
}

/*PartSupportGeometryURLDefault handles this case with default header values.

unexpected error
*/
type PartSupportGeometryURLDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the part support geometry Url default response
func (o *PartSupportGeometryURLDefault) Code() int {
	return o._statusCode
}

func (o *PartSupportGeometryURLDefault) Error() string {
	return fmt.Sprintf("[GET /parts/{partId}/supports/{supportId}/geometryurl][%d] PartSupportGeometryUrl default  %+v", o._statusCode, o.Payload)
}

func (o *PartSupportGeometryURLDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
