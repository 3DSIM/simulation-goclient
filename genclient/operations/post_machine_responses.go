package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// PostMachineReader is a Reader for the PostMachine structure.
type PostMachineReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostMachineReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostMachineOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewPostMachineUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPostMachineForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPostMachineDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPostMachineOK creates a PostMachineOK with default headers values
func NewPostMachineOK() *PostMachineOK {
	return &PostMachineOK{}
}

/*PostMachineOK handles this case with default header values.

Machine was successfully added.
*/
type PostMachineOK struct {
	Payload *models.Machine
}

func (o *PostMachineOK) Error() string {
	return fmt.Sprintf("[POST /machines][%d] postMachineOK  %+v", 200, o.Payload)
}

func (o *PostMachineOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Machine)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostMachineUnauthorized creates a PostMachineUnauthorized with default headers values
func NewPostMachineUnauthorized() *PostMachineUnauthorized {
	return &PostMachineUnauthorized{}
}

/*PostMachineUnauthorized handles this case with default header values.

Not authorized
*/
type PostMachineUnauthorized struct {
	Payload *models.Error
}

func (o *PostMachineUnauthorized) Error() string {
	return fmt.Sprintf("[POST /machines][%d] postMachineUnauthorized  %+v", 401, o.Payload)
}

func (o *PostMachineUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostMachineForbidden creates a PostMachineForbidden with default headers values
func NewPostMachineForbidden() *PostMachineForbidden {
	return &PostMachineForbidden{}
}

/*PostMachineForbidden handles this case with default header values.

Forbidden
*/
type PostMachineForbidden struct {
	Payload *models.Error
}

func (o *PostMachineForbidden) Error() string {
	return fmt.Sprintf("[POST /machines][%d] postMachineForbidden  %+v", 403, o.Payload)
}

func (o *PostMachineForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostMachineDefault creates a PostMachineDefault with default headers values
func NewPostMachineDefault(code int) *PostMachineDefault {
	return &PostMachineDefault{
		_statusCode: code,
	}
}

/*PostMachineDefault handles this case with default header values.

unexpected error
*/
type PostMachineDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the post machine default response
func (o *PostMachineDefault) Code() int {
	return o._statusCode
}

func (o *PostMachineDefault) Error() string {
	return fmt.Sprintf("[POST /machines][%d] postMachine default  %+v", o._statusCode, o.Payload)
}

func (o *PostMachineDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
