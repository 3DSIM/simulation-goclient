// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetBuildFilesParams creates a new GetBuildFilesParams object
// with the default values initialized.
func NewGetBuildFilesParams() *GetBuildFilesParams {
	var (
		limitDefault  = int32(10)
		offsetDefault = int32(0)
	)
	return &GetBuildFilesParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetBuildFilesParamsWithTimeout creates a new GetBuildFilesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetBuildFilesParamsWithTimeout(timeout time.Duration) *GetBuildFilesParams {
	var (
		limitDefault  = int32(10)
		offsetDefault = int32(0)
	)
	return &GetBuildFilesParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,

		timeout: timeout,
	}
}

// NewGetBuildFilesParamsWithContext creates a new GetBuildFilesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetBuildFilesParamsWithContext(ctx context.Context) *GetBuildFilesParams {
	var (
		limitDefault  = int32(10)
		offsetDefault = int32(0)
	)
	return &GetBuildFilesParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,

		Context: ctx,
	}
}

// NewGetBuildFilesParamsWithHTTPClient creates a new GetBuildFilesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetBuildFilesParamsWithHTTPClient(client *http.Client) *GetBuildFilesParams {
	var (
		limitDefault  = int32(10)
		offsetDefault = int32(0)
	)
	return &GetBuildFilesParams{
		Limit:      &limitDefault,
		Offset:     &offsetDefault,
		HTTPClient: client,
	}
}

/*GetBuildFilesParams contains all the parameters to send to the API endpoint
for the get build files operation typically these are written to a http.Request
*/
type GetBuildFilesParams struct {

	/*Archived
	  If true, will only return archived items.  If false, will only return unarchived items.  If not provided, will return both archived and unarchived items.

	*/
	Archived *bool
	/*Availability
	  availability value of build files to return, valid values: Uploaded, Processing, Available, Error

	*/
	Availability []string
	/*Limit
	  number of items to return within the query

	*/
	Limit *int32
	/*Offset
	  starting paging count; ex. 60 will skip the first 60 items in the list

	*/
	Offset *int32
	/*OrganizationID
	  the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.

	*/
	OrganizationID int32
	/*Sort
	  key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc

	*/
	Sort []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get build files params
func (o *GetBuildFilesParams) WithTimeout(timeout time.Duration) *GetBuildFilesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get build files params
func (o *GetBuildFilesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get build files params
func (o *GetBuildFilesParams) WithContext(ctx context.Context) *GetBuildFilesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get build files params
func (o *GetBuildFilesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get build files params
func (o *GetBuildFilesParams) WithHTTPClient(client *http.Client) *GetBuildFilesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get build files params
func (o *GetBuildFilesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArchived adds the archived to the get build files params
func (o *GetBuildFilesParams) WithArchived(archived *bool) *GetBuildFilesParams {
	o.SetArchived(archived)
	return o
}

// SetArchived adds the archived to the get build files params
func (o *GetBuildFilesParams) SetArchived(archived *bool) {
	o.Archived = archived
}

// WithAvailability adds the availability to the get build files params
func (o *GetBuildFilesParams) WithAvailability(availability []string) *GetBuildFilesParams {
	o.SetAvailability(availability)
	return o
}

// SetAvailability adds the availability to the get build files params
func (o *GetBuildFilesParams) SetAvailability(availability []string) {
	o.Availability = availability
}

// WithLimit adds the limit to the get build files params
func (o *GetBuildFilesParams) WithLimit(limit *int32) *GetBuildFilesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get build files params
func (o *GetBuildFilesParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the get build files params
func (o *GetBuildFilesParams) WithOffset(offset *int32) *GetBuildFilesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get build files params
func (o *GetBuildFilesParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithOrganizationID adds the organizationID to the get build files params
func (o *GetBuildFilesParams) WithOrganizationID(organizationID int32) *GetBuildFilesParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the get build files params
func (o *GetBuildFilesParams) SetOrganizationID(organizationID int32) {
	o.OrganizationID = organizationID
}

// WithSort adds the sort to the get build files params
func (o *GetBuildFilesParams) WithSort(sort []string) *GetBuildFilesParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get build files params
func (o *GetBuildFilesParams) SetSort(sort []string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *GetBuildFilesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Archived != nil {

		// query param archived
		var qrArchived bool
		if o.Archived != nil {
			qrArchived = *o.Archived
		}
		qArchived := swag.FormatBool(qrArchived)
		if qArchived != "" {
			if err := r.SetQueryParam("archived", qArchived); err != nil {
				return err
			}
		}

	}

	valuesAvailability := o.Availability

	joinedAvailability := swag.JoinByFormat(valuesAvailability, "")
	// query array param availability
	if err := r.SetQueryParam("availability", joinedAvailability...); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	// query param organizationId
	qrOrganizationID := o.OrganizationID
	qOrganizationID := swag.FormatInt32(qrOrganizationID)
	if qOrganizationID != "" {
		if err := r.SetQueryParam("organizationId", qOrganizationID); err != nil {
			return err
		}
	}

	valuesSort := o.Sort

	joinedSort := swag.JoinByFormat(valuesSort, "csv")
	// query array param sort
	if err := r.SetQueryParam("sort", joinedSort...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
