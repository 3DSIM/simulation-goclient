package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// ArchiveMaterialReader is a Reader for the ArchiveMaterial structure.
type ArchiveMaterialReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ArchiveMaterialReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewArchiveMaterialOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewArchiveMaterialUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewArchiveMaterialForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewArchiveMaterialNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewArchiveMaterialDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewArchiveMaterialOK creates a ArchiveMaterialOK with default headers values
func NewArchiveMaterialOK() *ArchiveMaterialOK {
	return &ArchiveMaterialOK{}
}

/*ArchiveMaterialOK handles this case with default header values.

material that has been archived with active field cleared
*/
type ArchiveMaterialOK struct {
}

func (o *ArchiveMaterialOK) Error() string {
	return fmt.Sprintf("[PUT /materials/{id}/archive][%d] archiveMaterialOK ", 200)
}

func (o *ArchiveMaterialOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewArchiveMaterialUnauthorized creates a ArchiveMaterialUnauthorized with default headers values
func NewArchiveMaterialUnauthorized() *ArchiveMaterialUnauthorized {
	return &ArchiveMaterialUnauthorized{}
}

/*ArchiveMaterialUnauthorized handles this case with default header values.

Not authorized
*/
type ArchiveMaterialUnauthorized struct {
	Payload *models.Error
}

func (o *ArchiveMaterialUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /materials/{id}/archive][%d] archiveMaterialUnauthorized  %+v", 401, o.Payload)
}

func (o *ArchiveMaterialUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArchiveMaterialForbidden creates a ArchiveMaterialForbidden with default headers values
func NewArchiveMaterialForbidden() *ArchiveMaterialForbidden {
	return &ArchiveMaterialForbidden{}
}

/*ArchiveMaterialForbidden handles this case with default header values.

Forbidden
*/
type ArchiveMaterialForbidden struct {
	Payload *models.Error
}

func (o *ArchiveMaterialForbidden) Error() string {
	return fmt.Sprintf("[PUT /materials/{id}/archive][%d] archiveMaterialForbidden  %+v", 403, o.Payload)
}

func (o *ArchiveMaterialForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArchiveMaterialNotFound creates a ArchiveMaterialNotFound with default headers values
func NewArchiveMaterialNotFound() *ArchiveMaterialNotFound {
	return &ArchiveMaterialNotFound{}
}

/*ArchiveMaterialNotFound handles this case with default header values.

Material not found
*/
type ArchiveMaterialNotFound struct {
}

func (o *ArchiveMaterialNotFound) Error() string {
	return fmt.Sprintf("[PUT /materials/{id}/archive][%d] archiveMaterialNotFound ", 404)
}

func (o *ArchiveMaterialNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewArchiveMaterialDefault creates a ArchiveMaterialDefault with default headers values
func NewArchiveMaterialDefault(code int) *ArchiveMaterialDefault {
	return &ArchiveMaterialDefault{
		_statusCode: code,
	}
}

/*ArchiveMaterialDefault handles this case with default header values.

unexpected error
*/
type ArchiveMaterialDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the archive material default response
func (o *ArchiveMaterialDefault) Code() int {
	return o._statusCode
}

func (o *ArchiveMaterialDefault) Error() string {
	return fmt.Sprintf("[PUT /materials/{id}/archive][%d] archiveMaterial default  %+v", o._statusCode, o.Payload)
}

func (o *ArchiveMaterialDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
