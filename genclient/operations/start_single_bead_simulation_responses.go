package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// StartSingleBeadSimulationReader is a Reader for the StartSingleBeadSimulation structure.
type StartSingleBeadSimulationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartSingleBeadSimulationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewStartSingleBeadSimulationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewStartSingleBeadSimulationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewStartSingleBeadSimulationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewStartSingleBeadSimulationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewStartSingleBeadSimulationDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewStartSingleBeadSimulationOK creates a StartSingleBeadSimulationOK with default headers values
func NewStartSingleBeadSimulationOK() *StartSingleBeadSimulationOK {
	return &StartSingleBeadSimulationOK{}
}

/*StartSingleBeadSimulationOK handles this case with default header values.

Simulation was successfully started.
*/
type StartSingleBeadSimulationOK struct {
}

func (o *StartSingleBeadSimulationOK) Error() string {
	return fmt.Sprintf("[PUT /singlebeadsimulations/{id}/start][%d] startSingleBeadSimulationOK ", 200)
}

func (o *StartSingleBeadSimulationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartSingleBeadSimulationUnauthorized creates a StartSingleBeadSimulationUnauthorized with default headers values
func NewStartSingleBeadSimulationUnauthorized() *StartSingleBeadSimulationUnauthorized {
	return &StartSingleBeadSimulationUnauthorized{}
}

/*StartSingleBeadSimulationUnauthorized handles this case with default header values.

Not authorized
*/
type StartSingleBeadSimulationUnauthorized struct {
	Payload *models.Error
}

func (o *StartSingleBeadSimulationUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /singlebeadsimulations/{id}/start][%d] startSingleBeadSimulationUnauthorized  %+v", 401, o.Payload)
}

func (o *StartSingleBeadSimulationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartSingleBeadSimulationForbidden creates a StartSingleBeadSimulationForbidden with default headers values
func NewStartSingleBeadSimulationForbidden() *StartSingleBeadSimulationForbidden {
	return &StartSingleBeadSimulationForbidden{}
}

/*StartSingleBeadSimulationForbidden handles this case with default header values.

Forbidden
*/
type StartSingleBeadSimulationForbidden struct {
	Payload *models.Error
}

func (o *StartSingleBeadSimulationForbidden) Error() string {
	return fmt.Sprintf("[PUT /singlebeadsimulations/{id}/start][%d] startSingleBeadSimulationForbidden  %+v", 403, o.Payload)
}

func (o *StartSingleBeadSimulationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartSingleBeadSimulationNotFound creates a StartSingleBeadSimulationNotFound with default headers values
func NewStartSingleBeadSimulationNotFound() *StartSingleBeadSimulationNotFound {
	return &StartSingleBeadSimulationNotFound{}
}

/*StartSingleBeadSimulationNotFound handles this case with default header values.

Simulation not found (id invalid)
*/
type StartSingleBeadSimulationNotFound struct {
	Payload *models.Error
}

func (o *StartSingleBeadSimulationNotFound) Error() string {
	return fmt.Sprintf("[PUT /singlebeadsimulations/{id}/start][%d] startSingleBeadSimulationNotFound  %+v", 404, o.Payload)
}

func (o *StartSingleBeadSimulationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartSingleBeadSimulationDefault creates a StartSingleBeadSimulationDefault with default headers values
func NewStartSingleBeadSimulationDefault(code int) *StartSingleBeadSimulationDefault {
	return &StartSingleBeadSimulationDefault{
		_statusCode: code,
	}
}

/*StartSingleBeadSimulationDefault handles this case with default header values.

unexpected error
*/
type StartSingleBeadSimulationDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the start single bead simulation default response
func (o *StartSingleBeadSimulationDefault) Code() int {
	return o._statusCode
}

func (o *StartSingleBeadSimulationDefault) Error() string {
	return fmt.Sprintf("[PUT /singlebeadsimulations/{id}/start][%d] startSingleBeadSimulation default  %+v", o._statusCode, o.Payload)
}

func (o *StartSingleBeadSimulationDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
