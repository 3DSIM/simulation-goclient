// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// PatchSupportByIDReader is a Reader for the PatchSupportByID structure.
type PatchSupportByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchSupportByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchSupportByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewPatchSupportByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPatchSupportByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchSupportByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchSupportByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchSupportByIDOK creates a PatchSupportByIDOK with default headers values
func NewPatchSupportByIDOK() *PatchSupportByIDOK {
	return &PatchSupportByIDOK{}
}

/*PatchSupportByIDOK handles this case with default header values.

Patched Support
*/
type PatchSupportByIDOK struct {
	Payload *models.PartSupport
}

func (o *PatchSupportByIDOK) Error() string {
	return fmt.Sprintf("[PATCH /supports/{id}][%d] patchSupportByIdOK  %+v", 200, o.Payload)
}

func (o *PatchSupportByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PartSupport)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSupportByIDUnauthorized creates a PatchSupportByIDUnauthorized with default headers values
func NewPatchSupportByIDUnauthorized() *PatchSupportByIDUnauthorized {
	return &PatchSupportByIDUnauthorized{}
}

/*PatchSupportByIDUnauthorized handles this case with default header values.

Not authorized
*/
type PatchSupportByIDUnauthorized struct {
	Payload *models.Error
}

func (o *PatchSupportByIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /supports/{id}][%d] patchSupportByIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchSupportByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSupportByIDForbidden creates a PatchSupportByIDForbidden with default headers values
func NewPatchSupportByIDForbidden() *PatchSupportByIDForbidden {
	return &PatchSupportByIDForbidden{}
}

/*PatchSupportByIDForbidden handles this case with default header values.

Forbidden
*/
type PatchSupportByIDForbidden struct {
	Payload *models.Error
}

func (o *PatchSupportByIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /supports/{id}][%d] patchSupportByIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchSupportByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSupportByIDNotFound creates a PatchSupportByIDNotFound with default headers values
func NewPatchSupportByIDNotFound() *PatchSupportByIDNotFound {
	return &PatchSupportByIDNotFound{}
}

/*PatchSupportByIDNotFound handles this case with default header values.

Support not found (id invalid)
*/
type PatchSupportByIDNotFound struct {
	Payload *models.Error
}

func (o *PatchSupportByIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /supports/{id}][%d] patchSupportByIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchSupportByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSupportByIDDefault creates a PatchSupportByIDDefault with default headers values
func NewPatchSupportByIDDefault(code int) *PatchSupportByIDDefault {
	return &PatchSupportByIDDefault{
		_statusCode: code,
	}
}

/*PatchSupportByIDDefault handles this case with default header values.

unexpected error
*/
type PatchSupportByIDDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the patch support by Id default response
func (o *PatchSupportByIDDefault) Code() int {
	return o._statusCode
}

func (o *PatchSupportByIDDefault) Error() string {
	return fmt.Sprintf("[PATCH /supports/{id}][%d] patchSupportById default  %+v", o._statusCode, o.Payload)
}

func (o *PatchSupportByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
