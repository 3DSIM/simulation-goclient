package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// CancelPorositySimulationReader is a Reader for the CancelPorositySimulation structure.
type CancelPorositySimulationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelPorositySimulationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCancelPorositySimulationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewCancelPorositySimulationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCancelPorositySimulationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCancelPorositySimulationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCancelPorositySimulationDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCancelPorositySimulationOK creates a CancelPorositySimulationOK with default headers values
func NewCancelPorositySimulationOK() *CancelPorositySimulationOK {
	return &CancelPorositySimulationOK{}
}

/*CancelPorositySimulationOK handles this case with default header values.

Simulation was successfully cancelled.
*/
type CancelPorositySimulationOK struct {
}

func (o *CancelPorositySimulationOK) Error() string {
	return fmt.Sprintf("[PUT /porositysimulations/{id}/cancel][%d] cancelPorositySimulationOK ", 200)
}

func (o *CancelPorositySimulationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCancelPorositySimulationUnauthorized creates a CancelPorositySimulationUnauthorized with default headers values
func NewCancelPorositySimulationUnauthorized() *CancelPorositySimulationUnauthorized {
	return &CancelPorositySimulationUnauthorized{}
}

/*CancelPorositySimulationUnauthorized handles this case with default header values.

Not authorized
*/
type CancelPorositySimulationUnauthorized struct {
	Payload *models.Error
}

func (o *CancelPorositySimulationUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /porositysimulations/{id}/cancel][%d] cancelPorositySimulationUnauthorized  %+v", 401, o.Payload)
}

func (o *CancelPorositySimulationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelPorositySimulationForbidden creates a CancelPorositySimulationForbidden with default headers values
func NewCancelPorositySimulationForbidden() *CancelPorositySimulationForbidden {
	return &CancelPorositySimulationForbidden{}
}

/*CancelPorositySimulationForbidden handles this case with default header values.

Forbidden
*/
type CancelPorositySimulationForbidden struct {
	Payload *models.Error
}

func (o *CancelPorositySimulationForbidden) Error() string {
	return fmt.Sprintf("[PUT /porositysimulations/{id}/cancel][%d] cancelPorositySimulationForbidden  %+v", 403, o.Payload)
}

func (o *CancelPorositySimulationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelPorositySimulationNotFound creates a CancelPorositySimulationNotFound with default headers values
func NewCancelPorositySimulationNotFound() *CancelPorositySimulationNotFound {
	return &CancelPorositySimulationNotFound{}
}

/*CancelPorositySimulationNotFound handles this case with default header values.

Simulation not found (id invalid)
*/
type CancelPorositySimulationNotFound struct {
	Payload *models.Error
}

func (o *CancelPorositySimulationNotFound) Error() string {
	return fmt.Sprintf("[PUT /porositysimulations/{id}/cancel][%d] cancelPorositySimulationNotFound  %+v", 404, o.Payload)
}

func (o *CancelPorositySimulationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelPorositySimulationDefault creates a CancelPorositySimulationDefault with default headers values
func NewCancelPorositySimulationDefault(code int) *CancelPorositySimulationDefault {
	return &CancelPorositySimulationDefault{
		_statusCode: code,
	}
}

/*CancelPorositySimulationDefault handles this case with default header values.

unexpected error
*/
type CancelPorositySimulationDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the cancel porosity simulation default response
func (o *CancelPorositySimulationDefault) Code() int {
	return o._statusCode
}

func (o *CancelPorositySimulationDefault) Error() string {
	return fmt.Sprintf("[PUT /porositysimulations/{id}/cancel][%d] cancelPorositySimulation default  %+v", o._statusCode, o.Payload)
}

func (o *CancelPorositySimulationDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
