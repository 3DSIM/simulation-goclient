// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// PatchPartSupportReader is a Reader for the PatchPartSupport structure.
type PatchPartSupportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchPartSupportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchPartSupportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewPatchPartSupportUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPatchPartSupportForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchPartSupportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchPartSupportDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchPartSupportOK creates a PatchPartSupportOK with default headers values
func NewPatchPartSupportOK() *PatchPartSupportOK {
	return &PatchPartSupportOK{}
}

/*PatchPartSupportOK handles this case with default header values.

Patched part support
*/
type PatchPartSupportOK struct {
	Payload *models.PartSupport
}

func (o *PatchPartSupportOK) Error() string {
	return fmt.Sprintf("[PATCH /parts/{partId}/supports/{supportId}][%d] patchPartSupportOK  %+v", 200, o.Payload)
}

func (o *PatchPartSupportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PartSupport)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPartSupportUnauthorized creates a PatchPartSupportUnauthorized with default headers values
func NewPatchPartSupportUnauthorized() *PatchPartSupportUnauthorized {
	return &PatchPartSupportUnauthorized{}
}

/*PatchPartSupportUnauthorized handles this case with default header values.

Not authorized
*/
type PatchPartSupportUnauthorized struct {
	Payload *models.Error
}

func (o *PatchPartSupportUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /parts/{partId}/supports/{supportId}][%d] patchPartSupportUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchPartSupportUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPartSupportForbidden creates a PatchPartSupportForbidden with default headers values
func NewPatchPartSupportForbidden() *PatchPartSupportForbidden {
	return &PatchPartSupportForbidden{}
}

/*PatchPartSupportForbidden handles this case with default header values.

Forbidden
*/
type PatchPartSupportForbidden struct {
	Payload *models.Error
}

func (o *PatchPartSupportForbidden) Error() string {
	return fmt.Sprintf("[PATCH /parts/{partId}/supports/{supportId}][%d] patchPartSupportForbidden  %+v", 403, o.Payload)
}

func (o *PatchPartSupportForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPartSupportNotFound creates a PatchPartSupportNotFound with default headers values
func NewPatchPartSupportNotFound() *PatchPartSupportNotFound {
	return &PatchPartSupportNotFound{}
}

/*PatchPartSupportNotFound handles this case with default header values.

Part not found (id invalid)
*/
type PatchPartSupportNotFound struct {
	Payload *models.Error
}

func (o *PatchPartSupportNotFound) Error() string {
	return fmt.Sprintf("[PATCH /parts/{partId}/supports/{supportId}][%d] patchPartSupportNotFound  %+v", 404, o.Payload)
}

func (o *PatchPartSupportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPartSupportDefault creates a PatchPartSupportDefault with default headers values
func NewPatchPartSupportDefault(code int) *PatchPartSupportDefault {
	return &PatchPartSupportDefault{
		_statusCode: code,
	}
}

/*PatchPartSupportDefault handles this case with default header values.

unexpected error
*/
type PatchPartSupportDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the patch part support default response
func (o *PatchPartSupportDefault) Code() int {
	return o._statusCode
}

func (o *PatchPartSupportDefault) Error() string {
	return fmt.Sprintf("[PATCH /parts/{partId}/supports/{supportId}][%d] patchPartSupport default  %+v", o._statusCode, o.Payload)
}

func (o *PatchPartSupportDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
