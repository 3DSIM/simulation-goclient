package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// AssumedStrainEstimateReader is a Reader for the AssumedStrainEstimate structure.
type AssumedStrainEstimateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AssumedStrainEstimateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAssumedStrainEstimateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewAssumedStrainEstimateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewAssumedStrainEstimateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewAssumedStrainEstimateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewAssumedStrainEstimateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAssumedStrainEstimateOK creates a AssumedStrainEstimateOK with default headers values
func NewAssumedStrainEstimateOK() *AssumedStrainEstimateOK {
	return &AssumedStrainEstimateOK{}
}

/*AssumedStrainEstimateOK handles this case with default header values.

Successfully estimated time for assumed strain simulation
*/
type AssumedStrainEstimateOK struct {
	Payload *models.SimulationEstimate
}

func (o *AssumedStrainEstimateOK) Error() string {
	return fmt.Sprintf("[GET /assumedstrainsimulations/{id}/estimate][%d] assumedStrainEstimateOK  %+v", 200, o.Payload)
}

func (o *AssumedStrainEstimateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SimulationEstimate)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssumedStrainEstimateUnauthorized creates a AssumedStrainEstimateUnauthorized with default headers values
func NewAssumedStrainEstimateUnauthorized() *AssumedStrainEstimateUnauthorized {
	return &AssumedStrainEstimateUnauthorized{}
}

/*AssumedStrainEstimateUnauthorized handles this case with default header values.

Not authorized
*/
type AssumedStrainEstimateUnauthorized struct {
	Payload *models.Error
}

func (o *AssumedStrainEstimateUnauthorized) Error() string {
	return fmt.Sprintf("[GET /assumedstrainsimulations/{id}/estimate][%d] assumedStrainEstimateUnauthorized  %+v", 401, o.Payload)
}

func (o *AssumedStrainEstimateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssumedStrainEstimateForbidden creates a AssumedStrainEstimateForbidden with default headers values
func NewAssumedStrainEstimateForbidden() *AssumedStrainEstimateForbidden {
	return &AssumedStrainEstimateForbidden{}
}

/*AssumedStrainEstimateForbidden handles this case with default header values.

Forbidden
*/
type AssumedStrainEstimateForbidden struct {
	Payload *models.Error
}

func (o *AssumedStrainEstimateForbidden) Error() string {
	return fmt.Sprintf("[GET /assumedstrainsimulations/{id}/estimate][%d] assumedStrainEstimateForbidden  %+v", 403, o.Payload)
}

func (o *AssumedStrainEstimateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssumedStrainEstimateNotFound creates a AssumedStrainEstimateNotFound with default headers values
func NewAssumedStrainEstimateNotFound() *AssumedStrainEstimateNotFound {
	return &AssumedStrainEstimateNotFound{}
}

/*AssumedStrainEstimateNotFound handles this case with default header values.

Not Found
*/
type AssumedStrainEstimateNotFound struct {
}

func (o *AssumedStrainEstimateNotFound) Error() string {
	return fmt.Sprintf("[GET /assumedstrainsimulations/{id}/estimate][%d] assumedStrainEstimateNotFound ", 404)
}

func (o *AssumedStrainEstimateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAssumedStrainEstimateDefault creates a AssumedStrainEstimateDefault with default headers values
func NewAssumedStrainEstimateDefault(code int) *AssumedStrainEstimateDefault {
	return &AssumedStrainEstimateDefault{
		_statusCode: code,
	}
}

/*AssumedStrainEstimateDefault handles this case with default header values.

unexpected error
*/
type AssumedStrainEstimateDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the assumed strain estimate default response
func (o *AssumedStrainEstimateDefault) Code() int {
	return o._statusCode
}

func (o *AssumedStrainEstimateDefault) Error() string {
	return fmt.Sprintf("[GET /assumedstrainsimulations/{id}/estimate][%d] AssumedStrainEstimate default  %+v", o._statusCode, o.Payload)
}

func (o *AssumedStrainEstimateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
