// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ArchivePart Archive a Part. Archiving a part will set the status to archived and will exclude the part from get list requests. To unarchive a part call /parts/{id}, change the status and then /parts (put) to update.
*/
func (a *Client) ArchivePart(params *ArchivePartParams, authInfo runtime.ClientAuthInfoWriter) (*ArchivePartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArchivePartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ArchivePart",
		Method:             "PUT",
		PathPattern:        "/parts/{id}/archive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ArchivePartReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ArchivePartOK), nil

}

/*
AssumedStrainEstimate Get an estimate, in minutes, for running an assumed strain simulation for the selected part and specified voxel size.
*/
func (a *Client) AssumedStrainEstimate(params *AssumedStrainEstimateParams, authInfo runtime.ClientAuthInfoWriter) (*AssumedStrainEstimateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssumedStrainEstimateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AssumedStrainEstimate",
		Method:             "GET",
		PathPattern:        "/assumedstrainsimulations/{id}/estimate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssumedStrainEstimateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AssumedStrainEstimateOK), nil

}

/*
ConfirmCancellation Confirms full cancellation of an active simulation.
*/
func (a *Client) ConfirmCancellation(params *ConfirmCancellationParams, authInfo runtime.ClientAuthInfoWriter) (*ConfirmCancellationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfirmCancellationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConfirmCancellation",
		Method:             "PUT",
		PathPattern:        "/simulations/{id}/cancelled",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfirmCancellationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConfirmCancellationOK), nil

}

/*
DeleteAssumedStrainSimulation This will delete an assumed strain simulation and all its associated data including output, logs, and any results from completed simulations
*/
func (a *Client) DeleteAssumedStrainSimulation(params *DeleteAssumedStrainSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAssumedStrainSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAssumedStrainSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAssumedStrainSimulation",
		Method:             "DELETE",
		PathPattern:        "/assumedstrainsimulations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAssumedStrainSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAssumedStrainSimulationOK), nil

}

/*
DeleteBuildFile This will delete a build file
*/
func (a *Client) DeleteBuildFile(params *DeleteBuildFileParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteBuildFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteBuildFile",
		Method:             "DELETE",
		PathPattern:        "/buildfiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBuildFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteBuildFileOK), nil

}

/*
DeletePart This will delete a part and all its associated geometry files
*/
func (a *Client) DeletePart(params *DeletePartParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePart",
		Method:             "DELETE",
		PathPattern:        "/parts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePartReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePartOK), nil

}

/*
DeletePartSupport This will delete a support and all its associated geometry files
*/
func (a *Client) DeletePartSupport(params *DeletePartSupportParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePartSupportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePartSupportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePartSupport",
		Method:             "DELETE",
		PathPattern:        "/parts/{partId}/supports/{supportId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePartSupportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePartSupportOK), nil

}

/*
DeletePorositySimulation This will delete a porosity simulation and all its associated data including output, logs, and any results from completed simulations
*/
func (a *Client) DeletePorositySimulation(params *DeletePorositySimulationParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePorositySimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePorositySimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePorositySimulation",
		Method:             "DELETE",
		PathPattern:        "/porositysimulations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePorositySimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePorositySimulationOK), nil

}

/*
DeleteScanPatternSimulation This will delete a scan pattern simulation and all its associated data including output, logs, and any results from completed simulations
*/
func (a *Client) DeleteScanPatternSimulation(params *DeleteScanPatternSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteScanPatternSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScanPatternSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteScanPatternSimulation",
		Method:             "DELETE",
		PathPattern:        "/scanpatternsimulations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteScanPatternSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteScanPatternSimulationOK), nil

}

/*
DeleteSingleBeadSimulation This will delete a single bead simulation and all its associated data including output, logs, and any results from completed simulations
*/
func (a *Client) DeleteSingleBeadSimulation(params *DeleteSingleBeadSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSingleBeadSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSingleBeadSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSingleBeadSimulation",
		Method:             "DELETE",
		PathPattern:        "/singlebeadsimulations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSingleBeadSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSingleBeadSimulationOK), nil

}

/*
DeleteThermalSimulation This will delete a thermal simulation and all its associated data including output, logs, and any results from completed simulations
*/
func (a *Client) DeleteThermalSimulation(params *DeleteThermalSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteThermalSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteThermalSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteThermalSimulation",
		Method:             "DELETE",
		PathPattern:        "/thermalsimulations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteThermalSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteThermalSimulationOK), nil

}

/*
PartSupportGeometry Gets a list of triangles for the geometry file stored in AmazonS3.
*/
func (a *Client) PartSupportGeometry(params *PartSupportGeometryParams, authInfo runtime.ClientAuthInfoWriter) (*PartSupportGeometryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartSupportGeometryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PartSupportGeometry",
		Method:             "GET",
		PathPattern:        "/parts/{partId}/supports/{supportId}/geometry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PartSupportGeometryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PartSupportGeometryOK), nil

}

/*
PartSupportGeometryURL Gets a time sensitive URL to the geometry file stored in AmazonS3.
*/
func (a *Client) PartSupportGeometryURL(params *PartSupportGeometryURLParams, authInfo runtime.ClientAuthInfoWriter) (*PartSupportGeometryURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartSupportGeometryURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PartSupportGeometryUrl",
		Method:             "GET",
		PathPattern:        "/parts/{partId}/supports/{supportId}/geometryurl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PartSupportGeometryURLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PartSupportGeometryURLOK), nil

}

/*
RequestCancellation Request a cancellation of a simulation.
*/
func (a *Client) RequestCancellation(params *RequestCancellationParams, authInfo runtime.ClientAuthInfoWriter) (*RequestCancellationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestCancellationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RequestCancellation",
		Method:             "PUT",
		PathPattern:        "/simulations/{id}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RequestCancellationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RequestCancellationOK), nil

}

/*
SupportGeometryUploadURL Gets a time sensitive URL to upload a support geometry file to AmazonS3.
*/
func (a *Client) SupportGeometryUploadURL(params *SupportGeometryUploadURLParams, authInfo runtime.ClientAuthInfoWriter) (*SupportGeometryUploadURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSupportGeometryUploadURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SupportGeometryUploadUrl",
		Method:             "GET",
		PathPattern:        "/parts/{partId}/supports/geometryuploadurl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SupportGeometryUploadURLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SupportGeometryUploadURLOK), nil

}

/*
UpdatePart Updates a Part
*/
func (a *Client) UpdatePart(params *UpdatePartParams, authInfo runtime.ClientAuthInfoWriter) (*UpdatePartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdatePart",
		Method:             "PUT",
		PathPattern:        "/parts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePartReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdatePartOK), nil

}

/*
AddCustomMaterial Creates a new custom material for the organizationId specified
*/
func (a *Client) AddCustomMaterial(params *AddCustomMaterialParams, authInfo runtime.ClientAuthInfoWriter) (*AddCustomMaterialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddCustomMaterialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addCustomMaterial",
		Method:             "POST",
		PathPattern:        "/materials/custom",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddCustomMaterialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddCustomMaterialOK), nil

}

/*
AddMaterial Creates a new material for the organizationId specified
*/
func (a *Client) AddMaterial(params *AddMaterialParams, authInfo runtime.ClientAuthInfoWriter) (*AddMaterialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddMaterialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addMaterial",
		Method:             "POST",
		PathPattern:        "/materials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddMaterialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddMaterialOK), nil

}

/*
AddParts Adds a part and starts processing the part.  When processing is finished, the "availability" field for the part will change to "Available".  See GET /parts.
*/
func (a *Client) AddParts(params *AddPartsParams, authInfo runtime.ClientAuthInfoWriter) (*AddPartsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddPartsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addParts",
		Method:             "POST",
		PathPattern:        "/parts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddPartsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddPartsOK), nil

}

/*
ArchiveMachine Archive a machine, making it not available for use in a simulation (sets archived property to true)
*/
func (a *Client) ArchiveMachine(params *ArchiveMachineParams, authInfo runtime.ClientAuthInfoWriter) (*ArchiveMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArchiveMachineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "archiveMachine",
		Method:             "PUT",
		PathPattern:        "/machines/{id}/archive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ArchiveMachineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ArchiveMachineOK), nil

}

/*
ArchiveMaterial archives a single material based on the ID supplied
*/
func (a *Client) ArchiveMaterial(params *ArchiveMaterialParams, authInfo runtime.ClientAuthInfoWriter) (*ArchiveMaterialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArchiveMaterialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "archiveMaterial",
		Method:             "PUT",
		PathPattern:        "/materials/{id}/archive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ArchiveMaterialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ArchiveMaterialOK), nil

}

/*
ArchivePartSupportConfiguration Archives a support configuration
*/
func (a *Client) ArchivePartSupportConfiguration(params *ArchivePartSupportConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*ArchivePartSupportConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArchivePartSupportConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "archivePartSupportConfiguration",
		Method:             "PUT",
		PathPattern:        "/parts/{partId}/supportconfigurations/{supportConfigurationId}/archive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ArchivePartSupportConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ArchivePartSupportConfigurationOK), nil

}

/*
CancelAssumedStrainSimulation Cancels a assumed strain simulation
*/
func (a *Client) CancelAssumedStrainSimulation(params *CancelAssumedStrainSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*CancelAssumedStrainSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelAssumedStrainSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancelAssumedStrainSimulation",
		Method:             "PUT",
		PathPattern:        "/assumedstrainsimulations/{id}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelAssumedStrainSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CancelAssumedStrainSimulationOK), nil

}

/*
CancelMicrostructureSimulation Cancels a microstructure simulation
*/
func (a *Client) CancelMicrostructureSimulation(params *CancelMicrostructureSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*CancelMicrostructureSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelMicrostructureSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancelMicrostructureSimulation",
		Method:             "PUT",
		PathPattern:        "/microstructuresimulations/{id}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelMicrostructureSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CancelMicrostructureSimulationOK), nil

}

/*
CancelPorositySimulation Cancels a porosity simulation
*/
func (a *Client) CancelPorositySimulation(params *CancelPorositySimulationParams, authInfo runtime.ClientAuthInfoWriter) (*CancelPorositySimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelPorositySimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancelPorositySimulation",
		Method:             "PUT",
		PathPattern:        "/porositysimulations/{id}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelPorositySimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CancelPorositySimulationOK), nil

}

/*
CancelScanPatternSimulation Cancels a Scan Pattern simulation
*/
func (a *Client) CancelScanPatternSimulation(params *CancelScanPatternSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*CancelScanPatternSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelScanPatternSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancelScanPatternSimulation",
		Method:             "PUT",
		PathPattern:        "/scanpatternsimulations/{id}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelScanPatternSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CancelScanPatternSimulationOK), nil

}

/*
CancelSingleBeadSimulation Cancels a single bead simulation
*/
func (a *Client) CancelSingleBeadSimulation(params *CancelSingleBeadSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*CancelSingleBeadSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelSingleBeadSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancelSingleBeadSimulation",
		Method:             "PUT",
		PathPattern:        "/singlebeadsimulations/{id}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelSingleBeadSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CancelSingleBeadSimulationOK), nil

}

/*
CancelThermalSimulation Cancels a thermal simulation
*/
func (a *Client) CancelThermalSimulation(params *CancelThermalSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*CancelThermalSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelThermalSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancelThermalSimulation",
		Method:             "PUT",
		PathPattern:        "/thermalsimulations/{id}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelThermalSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CancelThermalSimulationOK), nil

}

/*
DeleteMicrostructureSimulation This will delete a microstructure simulation and all its associated data including output, logs, and any results from completed simulations
*/
func (a *Client) DeleteMicrostructureSimulation(params *DeleteMicrostructureSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMicrostructureSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMicrostructureSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMicrostructureSimulation",
		Method:             "DELETE",
		PathPattern:        "/microstructuresimulations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMicrostructureSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMicrostructureSimulationOK), nil

}

/*
GetAssumedStrainSimulation Get a assumed strain simulation
*/
func (a *Client) GetAssumedStrainSimulation(params *GetAssumedStrainSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*GetAssumedStrainSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssumedStrainSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAssumedStrainSimulation",
		Method:             "GET",
		PathPattern:        "/assumedstrainsimulations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAssumedStrainSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAssumedStrainSimulationOK), nil

}

/*
GetAssumedStrainSimulationChildren Gets a list of all child simulations for a parent simulation
*/
func (a *Client) GetAssumedStrainSimulationChildren(params *GetAssumedStrainSimulationChildrenParams, authInfo runtime.ClientAuthInfoWriter) (*GetAssumedStrainSimulationChildrenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssumedStrainSimulationChildrenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAssumedStrainSimulationChildren",
		Method:             "GET",
		PathPattern:        "/assumedstrainsimulations/{id}/children",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAssumedStrainSimulationChildrenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAssumedStrainSimulationChildrenOK), nil

}

/*
GetAssumedStrainSimulations Gets a list of all assumed strain simulations for the active user
*/
func (a *Client) GetAssumedStrainSimulations(params *GetAssumedStrainSimulationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAssumedStrainSimulationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssumedStrainSimulationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAssumedStrainSimulations",
		Method:             "GET",
		PathPattern:        "/assumedstrainsimulations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAssumedStrainSimulationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAssumedStrainSimulationsOK), nil

}

/*
GetBuildFile Retrieve a single build file
*/
func (a *Client) GetBuildFile(params *GetBuildFileParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuildFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBuildFile",
		Method:             "GET",
		PathPattern:        "/buildfiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBuildFileOK), nil

}

/*
GetBuildFileGeometry Retrieve the part geometry associated with a specific build file as a list of triangles
*/
func (a *Client) GetBuildFileGeometry(params *GetBuildFileGeometryParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuildFileGeometryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildFileGeometryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBuildFileGeometry",
		Method:             "GET",
		PathPattern:        "/buildfiles/{id}/geometry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildFileGeometryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBuildFileGeometryOK), nil

}

/*
GetBuildFileGeometryURL Get a url to the part geometry STL file associated with a specific build file
*/
func (a *Client) GetBuildFileGeometryURL(params *GetBuildFileGeometryURLParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuildFileGeometryURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildFileGeometryURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBuildFileGeometryUrl",
		Method:             "GET",
		PathPattern:        "/buildfiles/{id}/geometryurl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildFileGeometryURLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBuildFileGeometryURLOK), nil

}

/*
GetBuildFileUploadURL Returns a url used to upload a ZIP file containing build file components. The returned url is used in a post to buildfiles/.
*/
func (a *Client) GetBuildFileUploadURL(params *GetBuildFileUploadURLParams) (*GetBuildFileUploadURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildFileUploadURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBuildFileUploadUrl",
		Method:             "GET",
		PathPattern:        "/buildfiles/buildfileuploadurl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildFileUploadURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBuildFileUploadURLOK), nil

}

/*
GetBuildFiles Get list of build files
*/
func (a *Client) GetBuildFiles(params *GetBuildFilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuildFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildFilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBuildFiles",
		Method:             "GET",
		PathPattern:        "/buildfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBuildFilesOK), nil

}

/*
GetMachine Get a machine
*/
func (a *Client) GetMachine(params *GetMachineParams, authInfo runtime.ClientAuthInfoWriter) (*GetMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMachineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMachine",
		Method:             "GET",
		PathPattern:        "/machines/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMachineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMachineOK), nil

}

/*
GetMachines Get list of machines
*/
func (a *Client) GetMachines(params *GetMachinesParams, authInfo runtime.ClientAuthInfoWriter) (*GetMachinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMachinesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMachines",
		Method:             "GET",
		PathPattern:        "/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMachinesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMachinesOK), nil

}

/*
GetMaterial Returns a material based on a single ID
*/
func (a *Client) GetMaterial(params *GetMaterialParams, authInfo runtime.ClientAuthInfoWriter) (*GetMaterialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMaterialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMaterial",
		Method:             "GET",
		PathPattern:        "/materials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMaterialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMaterialOK), nil

}

/*
GetMaterials Get list of materials
*/
func (a *Client) GetMaterials(params *GetMaterialsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMaterialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMaterialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMaterials",
		Method:             "GET",
		PathPattern:        "/materials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMaterialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMaterialsOK), nil

}

/*
GetMicrostructureSimulation Get a microstructure simulation
*/
func (a *Client) GetMicrostructureSimulation(params *GetMicrostructureSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*GetMicrostructureSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMicrostructureSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMicrostructureSimulation",
		Method:             "GET",
		PathPattern:        "/microstructuresimulations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMicrostructureSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMicrostructureSimulationOK), nil

}

/*
GetMicrostructureSimulationChildren Gets a list of all child simulations for a parent simulation
*/
func (a *Client) GetMicrostructureSimulationChildren(params *GetMicrostructureSimulationChildrenParams, authInfo runtime.ClientAuthInfoWriter) (*GetMicrostructureSimulationChildrenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMicrostructureSimulationChildrenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMicrostructureSimulationChildren",
		Method:             "GET",
		PathPattern:        "/microstructuresimulations/{id}/children",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMicrostructureSimulationChildrenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMicrostructureSimulationChildrenOK), nil

}

/*
GetMicrostructureSimulations Gets a list of all microstructure simulations for the active user
*/
func (a *Client) GetMicrostructureSimulations(params *GetMicrostructureSimulationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMicrostructureSimulationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMicrostructureSimulationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMicrostructureSimulations",
		Method:             "GET",
		PathPattern:        "/microstructuresimulations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMicrostructureSimulationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMicrostructureSimulationsOK), nil

}

/*
GetNewPartGeometryUploadURL Gets a time sensitive URL to upload a geometry file to AmazonS3.
*/
func (a *Client) GetNewPartGeometryUploadURL(params *GetNewPartGeometryUploadURLParams, authInfo runtime.ClientAuthInfoWriter) (*GetNewPartGeometryUploadURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNewPartGeometryUploadURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNewPartGeometryUploadUrl",
		Method:             "GET",
		PathPattern:        "/parts/geometryuploadurl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNewPartGeometryUploadURLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNewPartGeometryUploadURLOK), nil

}

/*
GetPart Get a single part by Id
*/
func (a *Client) GetPart(params *GetPartParams, authInfo runtime.ClientAuthInfoWriter) (*GetPartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPart",
		Method:             "GET",
		PathPattern:        "/parts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPartReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPartOK), nil

}

/*
GetPartGeometry Gets a list of triangles for the geometry file stored in AmazonS3.
*/
func (a *Client) GetPartGeometry(params *GetPartGeometryParams, authInfo runtime.ClientAuthInfoWriter) (*GetPartGeometryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPartGeometryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPartGeometry",
		Method:             "GET",
		PathPattern:        "/parts/{id}/geometry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPartGeometryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPartGeometryOK), nil

}

/*
GetPartGeometryURL Gets a time sensitive URL to the geometry file stored in AmazonS3.
*/
func (a *Client) GetPartGeometryURL(params *GetPartGeometryURLParams, authInfo runtime.ClientAuthInfoWriter) (*GetPartGeometryURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPartGeometryURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPartGeometryUrl",
		Method:             "GET",
		PathPattern:        "/parts/{id}/geometryurl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPartGeometryURLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPartGeometryURLOK), nil

}

/*
GetPartSupport Get a single support by Id
*/
func (a *Client) GetPartSupport(params *GetPartSupportParams, authInfo runtime.ClientAuthInfoWriter) (*GetPartSupportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPartSupportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPartSupport",
		Method:             "GET",
		PathPattern:        "/parts/{partId}/supports/{supportId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPartSupportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPartSupportOK), nil

}

/*
GetPartSupportByID Get a single support by Id
*/
func (a *Client) GetPartSupportByID(params *GetPartSupportByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetPartSupportByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPartSupportByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPartSupportById",
		Method:             "GET",
		PathPattern:        "/supports/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPartSupportByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPartSupportByIDOK), nil

}

/*
GetPartSupportConfiguration Get a single support configuration by Id
*/
func (a *Client) GetPartSupportConfiguration(params *GetPartSupportConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*GetPartSupportConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPartSupportConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPartSupportConfiguration",
		Method:             "GET",
		PathPattern:        "/parts/{partId}/supportconfigurations/{supportConfigurationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPartSupportConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPartSupportConfigurationOK), nil

}

/*
GetPartSupports Get list of supports
*/
func (a *Client) GetPartSupports(params *GetPartSupportsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPartSupportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPartSupportsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPartSupports",
		Method:             "GET",
		PathPattern:        "/supports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPartSupportsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPartSupportsOK), nil

}

/*
GetParts Get list of parts
*/
func (a *Client) GetParts(params *GetPartsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPartsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPartsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getParts",
		Method:             "GET",
		PathPattern:        "/parts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPartsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPartsOK), nil

}

/*
GetPorositySimulation Get a porosity simulation
*/
func (a *Client) GetPorositySimulation(params *GetPorositySimulationParams, authInfo runtime.ClientAuthInfoWriter) (*GetPorositySimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPorositySimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPorositySimulation",
		Method:             "GET",
		PathPattern:        "/porositysimulations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPorositySimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPorositySimulationOK), nil

}

/*
GetPorositySimulationChildren Gets a list of all child simulations for a parent simulation
*/
func (a *Client) GetPorositySimulationChildren(params *GetPorositySimulationChildrenParams, authInfo runtime.ClientAuthInfoWriter) (*GetPorositySimulationChildrenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPorositySimulationChildrenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPorositySimulationChildren",
		Method:             "GET",
		PathPattern:        "/porositysimulations/{id}/children",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPorositySimulationChildrenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPorositySimulationChildrenOK), nil

}

/*
GetPorositySimulations Gets a list of all porosity simulation
*/
func (a *Client) GetPorositySimulations(params *GetPorositySimulationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPorositySimulationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPorositySimulationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPorositySimulations",
		Method:             "GET",
		PathPattern:        "/porositysimulations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPorositySimulationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPorositySimulationsOK), nil

}

/*
GetScanPatternSimulation Get a Scan Pattern simulation
*/
func (a *Client) GetScanPatternSimulation(params *GetScanPatternSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*GetScanPatternSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScanPatternSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getScanPatternSimulation",
		Method:             "GET",
		PathPattern:        "/scanpatternsimulations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScanPatternSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetScanPatternSimulationOK), nil

}

/*
GetScanPatternSimulationChildren Gets a list of all child simulations for a parent simulation
*/
func (a *Client) GetScanPatternSimulationChildren(params *GetScanPatternSimulationChildrenParams, authInfo runtime.ClientAuthInfoWriter) (*GetScanPatternSimulationChildrenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScanPatternSimulationChildrenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getScanPatternSimulationChildren",
		Method:             "GET",
		PathPattern:        "/scanpatternsimulations/{id}/children",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScanPatternSimulationChildrenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetScanPatternSimulationChildrenOK), nil

}

/*
GetScanPatternSimulations Gets a list of all scan pattern simulations for the active user
*/
func (a *Client) GetScanPatternSimulations(params *GetScanPatternSimulationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetScanPatternSimulationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScanPatternSimulationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getScanPatternSimulations",
		Method:             "GET",
		PathPattern:        "/scanpatternsimulations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScanPatternSimulationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetScanPatternSimulationsOK), nil

}

/*
GetSimulation Get a simulation
*/
func (a *Client) GetSimulation(params *GetSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*GetSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSimulation",
		Method:             "GET",
		PathPattern:        "/simulations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSimulationOK), nil

}

/*
GetSimulationActivities Gets a list of all activities for a simulation
*/
func (a *Client) GetSimulationActivities(params *GetSimulationActivitiesParams, authInfo runtime.ClientAuthInfoWriter) (*GetSimulationActivitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSimulationActivitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSimulationActivities",
		Method:             "GET",
		PathPattern:        "/simulations/{id}/activities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSimulationActivitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSimulationActivitiesOK), nil

}

/*
GetSimulationActivity Gets an activity for a simulation
*/
func (a *Client) GetSimulationActivity(params *GetSimulationActivityParams, authInfo runtime.ClientAuthInfoWriter) (*GetSimulationActivityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSimulationActivityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSimulationActivity",
		Method:             "GET",
		PathPattern:        "/simulations/{id}/activities/{activityId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSimulationActivityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSimulationActivityOK), nil

}

/*
GetSimulationChildren Gets a list of all child simulations for a parent simulation
*/
func (a *Client) GetSimulationChildren(params *GetSimulationChildrenParams, authInfo runtime.ClientAuthInfoWriter) (*GetSimulationChildrenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSimulationChildrenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSimulationChildren",
		Method:             "GET",
		PathPattern:        "/simulations/{id}/children",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSimulationChildrenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSimulationChildrenOK), nil

}

/*
GetSimulationLogs Gets a list of all logs for a simulation
*/
func (a *Client) GetSimulationLogs(params *GetSimulationLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSimulationLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSimulationLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSimulationLogs",
		Method:             "GET",
		PathPattern:        "/simulations/{id}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSimulationLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSimulationLogsOK), nil

}

/*
GetSimulationOutputs Gets a list of all outputs for a simulation
*/
func (a *Client) GetSimulationOutputs(params *GetSimulationOutputsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSimulationOutputsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSimulationOutputsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSimulationOutputs",
		Method:             "GET",
		PathPattern:        "/simulations/{id}/outputs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSimulationOutputsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSimulationOutputsOK), nil

}

/*
GetSimulations Gets a list of all simulations
*/
func (a *Client) GetSimulations(params *GetSimulationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSimulationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSimulationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSimulations",
		Method:             "GET",
		PathPattern:        "/simulations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSimulationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSimulationsOK), nil

}

/*
GetSingleBeadSimulation Get a single bead simulation
*/
func (a *Client) GetSingleBeadSimulation(params *GetSingleBeadSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*GetSingleBeadSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSingleBeadSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSingleBeadSimulation",
		Method:             "GET",
		PathPattern:        "/singlebeadsimulations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSingleBeadSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSingleBeadSimulationOK), nil

}

/*
GetSingleBeadSimulationChildren Gets a list of all child simulations for a parent simulation
*/
func (a *Client) GetSingleBeadSimulationChildren(params *GetSingleBeadSimulationChildrenParams, authInfo runtime.ClientAuthInfoWriter) (*GetSingleBeadSimulationChildrenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSingleBeadSimulationChildrenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSingleBeadSimulationChildren",
		Method:             "GET",
		PathPattern:        "/singlebeadsimulations/{id}/children",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSingleBeadSimulationChildrenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSingleBeadSimulationChildrenOK), nil

}

/*
GetSingleBeadSimulations Gets a list of all single bead simulations for the active user
*/
func (a *Client) GetSingleBeadSimulations(params *GetSingleBeadSimulationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSingleBeadSimulationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSingleBeadSimulationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSingleBeadSimulations",
		Method:             "GET",
		PathPattern:        "/singlebeadsimulations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSingleBeadSimulationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSingleBeadSimulationsOK), nil

}

/*
GetThermalSimulation Get a thermal simulation
*/
func (a *Client) GetThermalSimulation(params *GetThermalSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*GetThermalSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetThermalSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getThermalSimulation",
		Method:             "GET",
		PathPattern:        "/thermalsimulations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetThermalSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetThermalSimulationOK), nil

}

/*
GetThermalSimulationChildren Gets a list of all child simulations for a parent simulation
*/
func (a *Client) GetThermalSimulationChildren(params *GetThermalSimulationChildrenParams, authInfo runtime.ClientAuthInfoWriter) (*GetThermalSimulationChildrenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetThermalSimulationChildrenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getThermalSimulationChildren",
		Method:             "GET",
		PathPattern:        "/thermalsimulations/{id}/children",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetThermalSimulationChildrenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetThermalSimulationChildrenOK), nil

}

/*
GetThermalSimulations Gets a list of all thermal simulations for the active user
*/
func (a *Client) GetThermalSimulations(params *GetThermalSimulationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetThermalSimulationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetThermalSimulationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getThermalSimulations",
		Method:             "GET",
		PathPattern:        "/thermalsimulations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetThermalSimulationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetThermalSimulationsOK), nil

}

/*
PatchActivity Update fields within an activity
*/
func (a *Client) PatchActivity(params *PatchActivityParams, authInfo runtime.ClientAuthInfoWriter) (*PatchActivityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchActivityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchActivity",
		Method:             "PATCH",
		PathPattern:        "/simulations/{id}/activities/{activityId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchActivityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchActivityOK), nil

}

/*
PatchBuildFile Update fields within a build file
*/
func (a *Client) PatchBuildFile(params *PatchBuildFileParams, authInfo runtime.ClientAuthInfoWriter) (*PatchBuildFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchBuildFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchBuildFile",
		Method:             "PATCH",
		PathPattern:        "/buildfiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchBuildFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchBuildFileOK), nil

}

/*
PatchMicrostructureSensor Update fields within a microstructure sensor.
*/
func (a *Client) PatchMicrostructureSensor(params *PatchMicrostructureSensorParams, authInfo runtime.ClientAuthInfoWriter) (*PatchMicrostructureSensorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchMicrostructureSensorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchMicrostructureSensor",
		Method:             "PATCH",
		PathPattern:        "/microstructuresimulations/{id}/sensors/{sensorId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchMicrostructureSensorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchMicrostructureSensorOK), nil

}

/*
PatchPart Update fields within a part
*/
func (a *Client) PatchPart(params *PatchPartParams, authInfo runtime.ClientAuthInfoWriter) (*PatchPartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchPartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchPart",
		Method:             "PATCH",
		PathPattern:        "/parts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchPartReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchPartOK), nil

}

/*
PatchPartSupport Update fields within a support
*/
func (a *Client) PatchPartSupport(params *PatchPartSupportParams, authInfo runtime.ClientAuthInfoWriter) (*PatchPartSupportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchPartSupportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchPartSupport",
		Method:             "PATCH",
		PathPattern:        "/parts/{partId}/supports/{supportId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchPartSupportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchPartSupportOK), nil

}

/*
PatchSimulation Patch a simulation
*/
func (a *Client) PatchSimulation(params *PatchSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*PatchSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchSimulation",
		Method:             "PATCH",
		PathPattern:        "/simulations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchSimulationOK), nil

}

/*
PatchSupportByID Update fields within a support
*/
func (a *Client) PatchSupportByID(params *PatchSupportByIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchSupportByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSupportByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchSupportById",
		Method:             "PATCH",
		PathPattern:        "/supports/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchSupportByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchSupportByIDOK), nil

}

/*
PostAssumedStrainSimulation Posts a new assumed strain simulation
*/
func (a *Client) PostAssumedStrainSimulation(params *PostAssumedStrainSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*PostAssumedStrainSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAssumedStrainSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAssumedStrainSimulation",
		Method:             "POST",
		PathPattern:        "/assumedstrainsimulations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAssumedStrainSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAssumedStrainSimulationOK), nil

}

/*
PostBuildFile Add a new build file
*/
func (a *Client) PostBuildFile(params *PostBuildFileParams, authInfo runtime.ClientAuthInfoWriter) (*PostBuildFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBuildFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postBuildFile",
		Method:             "POST",
		PathPattern:        "/buildfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostBuildFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostBuildFileOK), nil

}

/*
PostMachine Add a machine
*/
func (a *Client) PostMachine(params *PostMachineParams, authInfo runtime.ClientAuthInfoWriter) (*PostMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMachineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postMachine",
		Method:             "POST",
		PathPattern:        "/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMachineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMachineOK), nil

}

/*
PostMicrostructureSimulation Posts a new microstructure simulation
*/
func (a *Client) PostMicrostructureSimulation(params *PostMicrostructureSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*PostMicrostructureSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMicrostructureSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postMicrostructureSimulation",
		Method:             "POST",
		PathPattern:        "/microstructuresimulations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMicrostructureSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMicrostructureSimulationOK), nil

}

/*
PostPartSupport Adds a support and starts processing the support.  When processing is finished, the "availability" field for the part will change to "Available".
*/
func (a *Client) PostPartSupport(params *PostPartSupportParams, authInfo runtime.ClientAuthInfoWriter) (*PostPartSupportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPartSupportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPartSupport",
		Method:             "POST",
		PathPattern:        "/parts/{partId}/supports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPartSupportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPartSupportOK), nil

}

/*
PostPartSupportConfiguration Adds a support configuration.
*/
func (a *Client) PostPartSupportConfiguration(params *PostPartSupportConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*PostPartSupportConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPartSupportConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPartSupportConfiguration",
		Method:             "POST",
		PathPattern:        "/parts/{partId}/supportconfigurations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPartSupportConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPartSupportConfigurationOK), nil

}

/*
PostPorositySimulation Posts a new porosity simulation
*/
func (a *Client) PostPorositySimulation(params *PostPorositySimulationParams, authInfo runtime.ClientAuthInfoWriter) (*PostPorositySimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPorositySimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPorositySimulation",
		Method:             "POST",
		PathPattern:        "/porositysimulations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPorositySimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPorositySimulationOK), nil

}

/*
PostScanPatternSimulation Posts a new scan pattern simulation
*/
func (a *Client) PostScanPatternSimulation(params *PostScanPatternSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*PostScanPatternSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostScanPatternSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postScanPatternSimulation",
		Method:             "POST",
		PathPattern:        "/scanpatternsimulations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostScanPatternSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostScanPatternSimulationOK), nil

}

/*
PostSimulationActivity Creates a new activity for the simulation
*/
func (a *Client) PostSimulationActivity(params *PostSimulationActivityParams, authInfo runtime.ClientAuthInfoWriter) (*PostSimulationActivityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSimulationActivityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSimulationActivity",
		Method:             "POST",
		PathPattern:        "/simulations/{id}/activities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSimulationActivityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSimulationActivityOK), nil

}

/*
PostSimulationLog Creates a new log entry in the simulation
*/
func (a *Client) PostSimulationLog(params *PostSimulationLogParams, authInfo runtime.ClientAuthInfoWriter) (*PostSimulationLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSimulationLogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSimulationLog",
		Method:             "POST",
		PathPattern:        "/simulations/{id}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSimulationLogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSimulationLogOK), nil

}

/*
PostSimulationOutput Creates a new output for the simulation
*/
func (a *Client) PostSimulationOutput(params *PostSimulationOutputParams, authInfo runtime.ClientAuthInfoWriter) (*PostSimulationOutputOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSimulationOutputParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSimulationOutput",
		Method:             "POST",
		PathPattern:        "/simulations/{id}/outputs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSimulationOutputReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSimulationOutputOK), nil

}

/*
PostSingleBeadSimulation Posts a new single bead simulation
*/
func (a *Client) PostSingleBeadSimulation(params *PostSingleBeadSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*PostSingleBeadSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSingleBeadSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSingleBeadSimulation",
		Method:             "POST",
		PathPattern:        "/singlebeadsimulations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSingleBeadSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSingleBeadSimulationOK), nil

}

/*
PostThermalSimulation Posts a new thermal simulation
*/
func (a *Client) PostThermalSimulation(params *PostThermalSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*PostThermalSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostThermalSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postThermalSimulation",
		Method:             "POST",
		PathPattern:        "/thermalsimulations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostThermalSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostThermalSimulationOK), nil

}

/*
PutAssumedStrainSimulation Puts an updated assumed strain simulation (Only accepts updates to title, description, and tags once simulation is started)
*/
func (a *Client) PutAssumedStrainSimulation(params *PutAssumedStrainSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*PutAssumedStrainSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAssumedStrainSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAssumedStrainSimulation",
		Method:             "PUT",
		PathPattern:        "/assumedstrainsimulations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAssumedStrainSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAssumedStrainSimulationOK), nil

}

/*
PutMachine Update a machine
*/
func (a *Client) PutMachine(params *PutMachineParams, authInfo runtime.ClientAuthInfoWriter) (*PutMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMachineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putMachine",
		Method:             "PUT",
		PathPattern:        "/machines/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMachineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMachineOK), nil

}

/*
PutMicrostructureSimulation Puts an updated microstructure simulation (Only accepts updates to title, description, and tags once simulation is started)
*/
func (a *Client) PutMicrostructureSimulation(params *PutMicrostructureSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*PutMicrostructureSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMicrostructureSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putMicrostructureSimulation",
		Method:             "PUT",
		PathPattern:        "/microstructuresimulations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMicrostructureSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMicrostructureSimulationOK), nil

}

/*
PutPorositySimulation Puts an updated porosity simulation (Only accepts updates to title, description, and tags once simulation is started)
*/
func (a *Client) PutPorositySimulation(params *PutPorositySimulationParams, authInfo runtime.ClientAuthInfoWriter) (*PutPorositySimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPorositySimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putPorositySimulation",
		Method:             "PUT",
		PathPattern:        "/porositysimulations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutPorositySimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutPorositySimulationOK), nil

}

/*
PutScanPatternSimulation Puts an updated scan pattern simulation (Only accepts updates to title, description, and tags once simulation is started)
*/
func (a *Client) PutScanPatternSimulation(params *PutScanPatternSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*PutScanPatternSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutScanPatternSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putScanPatternSimulation",
		Method:             "PUT",
		PathPattern:        "/scanpatternsimulations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutScanPatternSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutScanPatternSimulationOK), nil

}

/*
PutSimulationActivity Updates an activity for a simulation
*/
func (a *Client) PutSimulationActivity(params *PutSimulationActivityParams, authInfo runtime.ClientAuthInfoWriter) (*PutSimulationActivityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSimulationActivityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSimulationActivity",
		Method:             "PUT",
		PathPattern:        "/simulations/{id}/activities/{activityId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutSimulationActivityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSimulationActivityOK), nil

}

/*
PutSingleBeadSimulation Puts an updated single bead simulation (Only accepts updates to title, description, and tags once simulation is started)
*/
func (a *Client) PutSingleBeadSimulation(params *PutSingleBeadSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*PutSingleBeadSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSingleBeadSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSingleBeadSimulation",
		Method:             "PUT",
		PathPattern:        "/singlebeadsimulations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutSingleBeadSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSingleBeadSimulationOK), nil

}

/*
PutThermalSimulation Puts an updated thermal simulation (Only accepts updates to title, description, and tags once simulation is started)
*/
func (a *Client) PutThermalSimulation(params *PutThermalSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*PutThermalSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutThermalSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putThermalSimulation",
		Method:             "PUT",
		PathPattern:        "/thermalsimulations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutThermalSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutThermalSimulationOK), nil

}

/*
StartAssumedStrainSimulation Starts an assumed strain simulation.  If the simulation has been started before, start requests have no effect.
*/
func (a *Client) StartAssumedStrainSimulation(params *StartAssumedStrainSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*StartAssumedStrainSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartAssumedStrainSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startAssumedStrainSimulation",
		Method:             "PUT",
		PathPattern:        "/assumedstrainsimulations/{id}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartAssumedStrainSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StartAssumedStrainSimulationOK), nil

}

/*
StartMicrostructureSimulation Starts a microstructure simulation.  If the simulation has been started before, start requests have no effect.
*/
func (a *Client) StartMicrostructureSimulation(params *StartMicrostructureSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*StartMicrostructureSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartMicrostructureSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startMicrostructureSimulation",
		Method:             "PUT",
		PathPattern:        "/microstructuresimulations/{id}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartMicrostructureSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StartMicrostructureSimulationOK), nil

}

/*
StartPorositySimulation Starts a porosity simulation.  If the simulation has been started before, start requests have no effect.
*/
func (a *Client) StartPorositySimulation(params *StartPorositySimulationParams, authInfo runtime.ClientAuthInfoWriter) (*StartPorositySimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartPorositySimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startPorositySimulation",
		Method:             "PUT",
		PathPattern:        "/porositysimulations/{id}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartPorositySimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StartPorositySimulationOK), nil

}

/*
StartScanPatternSimulation Starts a Scan Pattern simulation.  If the simulation has been started before, start requests have no effect.
*/
func (a *Client) StartScanPatternSimulation(params *StartScanPatternSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*StartScanPatternSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartScanPatternSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startScanPatternSimulation",
		Method:             "PUT",
		PathPattern:        "/scanpatternsimulations/{id}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartScanPatternSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StartScanPatternSimulationOK), nil

}

/*
StartSingleBeadSimulation Starts a single bead simulation.  If the simulation has been started before, start requests have no effect.
*/
func (a *Client) StartSingleBeadSimulation(params *StartSingleBeadSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*StartSingleBeadSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartSingleBeadSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startSingleBeadSimulation",
		Method:             "PUT",
		PathPattern:        "/singlebeadsimulations/{id}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartSingleBeadSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StartSingleBeadSimulationOK), nil

}

/*
StartThermalSimulation Starts a thermal simulation.  If the simulation has been started before, start requests have no effect.
*/
func (a *Client) StartThermalSimulation(params *StartThermalSimulationParams, authInfo runtime.ClientAuthInfoWriter) (*StartThermalSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartThermalSimulationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startThermalSimulation",
		Method:             "PUT",
		PathPattern:        "/thermalsimulations/{id}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartThermalSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StartThermalSimulationOK), nil

}

/*
Status Use this endpoint to check server status.

*/
func (a *Client) Status(params *StatusParams) (*StatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "status",
		Method:             "GET",
		PathPattern:        "/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StatusOK), nil

}

/*
UnarchiveMachine Unarchive a machine, making it available for use in a simulation (sets archived property to false)
*/
func (a *Client) UnarchiveMachine(params *UnarchiveMachineParams, authInfo runtime.ClientAuthInfoWriter) (*UnarchiveMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnarchiveMachineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unarchiveMachine",
		Method:             "PUT",
		PathPattern:        "/machines/{id}/unarchive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnarchiveMachineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UnarchiveMachineOK), nil

}

/*
UpdateBuildFile Update a single build file
*/
func (a *Client) UpdateBuildFile(params *UpdateBuildFileParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateBuildFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBuildFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateBuildFile",
		Method:             "PUT",
		PathPattern:        "/buildfiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBuildFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateBuildFileOK), nil

}

/*
UpdateMaterial Update a material
*/
func (a *Client) UpdateMaterial(params *UpdateMaterialParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMaterialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMaterialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMaterial",
		Method:             "PUT",
		PathPattern:        "/materials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMaterialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMaterialOK), nil

}

/*
UpdatePartSupport Updates a Support
*/
func (a *Client) UpdatePartSupport(params *UpdatePartSupportParams, authInfo runtime.ClientAuthInfoWriter) (*UpdatePartSupportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePartSupportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updatePartSupport",
		Method:             "PUT",
		PathPattern:        "/parts/{partId}/supports/{supportId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePartSupportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdatePartSupportOK), nil

}

/*
UpdatePartSupportConfiguration Updates a support configuration
*/
func (a *Client) UpdatePartSupportConfiguration(params *UpdatePartSupportConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*UpdatePartSupportConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePartSupportConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updatePartSupportConfiguration",
		Method:             "PUT",
		PathPattern:        "/parts/{partId}/supportconfigurations/{supportConfigurationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePartSupportConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdatePartSupportConfigurationOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
