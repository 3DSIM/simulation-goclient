// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// SupportGeometryUploadURLReader is a Reader for the SupportGeometryUploadURL structure.
type SupportGeometryUploadURLReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SupportGeometryUploadURLReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSupportGeometryUploadURLOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewSupportGeometryUploadURLForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewSupportGeometryUploadURLDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSupportGeometryUploadURLOK creates a SupportGeometryUploadURLOK with default headers values
func NewSupportGeometryUploadURLOK() *SupportGeometryUploadURLOK {
	return &SupportGeometryUploadURLOK{}
}

/*SupportGeometryUploadURLOK handles this case with default header values.

Successfully returns a part support geometry url for a new support upload
*/
type SupportGeometryUploadURLOK struct {
	Payload *models.PartUploadRequest
}

func (o *SupportGeometryUploadURLOK) Error() string {
	return fmt.Sprintf("[GET /parts/{partId}/supports/geometryuploadurl][%d] supportGeometryUploadUrlOK  %+v", 200, o.Payload)
}

func (o *SupportGeometryUploadURLOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PartUploadRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSupportGeometryUploadURLForbidden creates a SupportGeometryUploadURLForbidden with default headers values
func NewSupportGeometryUploadURLForbidden() *SupportGeometryUploadURLForbidden {
	return &SupportGeometryUploadURLForbidden{}
}

/*SupportGeometryUploadURLForbidden handles this case with default header values.

Not authorized
*/
type SupportGeometryUploadURLForbidden struct {
	Payload *models.Error
}

func (o *SupportGeometryUploadURLForbidden) Error() string {
	return fmt.Sprintf("[GET /parts/{partId}/supports/geometryuploadurl][%d] supportGeometryUploadUrlForbidden  %+v", 403, o.Payload)
}

func (o *SupportGeometryUploadURLForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSupportGeometryUploadURLDefault creates a SupportGeometryUploadURLDefault with default headers values
func NewSupportGeometryUploadURLDefault(code int) *SupportGeometryUploadURLDefault {
	return &SupportGeometryUploadURLDefault{
		_statusCode: code,
	}
}

/*SupportGeometryUploadURLDefault handles this case with default header values.

unexpected error
*/
type SupportGeometryUploadURLDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the support geometry upload Url default response
func (o *SupportGeometryUploadURLDefault) Code() int {
	return o._statusCode
}

func (o *SupportGeometryUploadURLDefault) Error() string {
	return fmt.Sprintf("[GET /parts/{partId}/supports/geometryuploadurl][%d] SupportGeometryUploadUrl default  %+v", o._statusCode, o.Payload)
}

func (o *SupportGeometryUploadURLDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
