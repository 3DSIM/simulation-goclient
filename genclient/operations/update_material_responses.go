// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// UpdateMaterialReader is a Reader for the UpdateMaterial structure.
type UpdateMaterialReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateMaterialReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateMaterialOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewUpdateMaterialUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateMaterialForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateMaterialNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateMaterialDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateMaterialOK creates a UpdateMaterialOK with default headers values
func NewUpdateMaterialOK() *UpdateMaterialOK {
	return &UpdateMaterialOK{}
}

/*UpdateMaterialOK handles this case with default header values.

Material was successfully updated.
*/
type UpdateMaterialOK struct {
	Payload *models.Material
}

func (o *UpdateMaterialOK) Error() string {
	return fmt.Sprintf("[PUT /materials/{id}][%d] updateMaterialOK  %+v", 200, o.Payload)
}

func (o *UpdateMaterialOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Material)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMaterialUnauthorized creates a UpdateMaterialUnauthorized with default headers values
func NewUpdateMaterialUnauthorized() *UpdateMaterialUnauthorized {
	return &UpdateMaterialUnauthorized{}
}

/*UpdateMaterialUnauthorized handles this case with default header values.

Not authorized
*/
type UpdateMaterialUnauthorized struct {
	Payload *models.Error
}

func (o *UpdateMaterialUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /materials/{id}][%d] updateMaterialUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateMaterialUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMaterialForbidden creates a UpdateMaterialForbidden with default headers values
func NewUpdateMaterialForbidden() *UpdateMaterialForbidden {
	return &UpdateMaterialForbidden{}
}

/*UpdateMaterialForbidden handles this case with default header values.

Forbidden
*/
type UpdateMaterialForbidden struct {
	Payload *models.Error
}

func (o *UpdateMaterialForbidden) Error() string {
	return fmt.Sprintf("[PUT /materials/{id}][%d] updateMaterialForbidden  %+v", 403, o.Payload)
}

func (o *UpdateMaterialForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMaterialNotFound creates a UpdateMaterialNotFound with default headers values
func NewUpdateMaterialNotFound() *UpdateMaterialNotFound {
	return &UpdateMaterialNotFound{}
}

/*UpdateMaterialNotFound handles this case with default header values.

Material not found (id invalid)
*/
type UpdateMaterialNotFound struct {
}

func (o *UpdateMaterialNotFound) Error() string {
	return fmt.Sprintf("[PUT /materials/{id}][%d] updateMaterialNotFound ", 404)
}

func (o *UpdateMaterialNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateMaterialDefault creates a UpdateMaterialDefault with default headers values
func NewUpdateMaterialDefault(code int) *UpdateMaterialDefault {
	return &UpdateMaterialDefault{
		_statusCode: code,
	}
}

/*UpdateMaterialDefault handles this case with default header values.

unexpected error
*/
type UpdateMaterialDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the update material default response
func (o *UpdateMaterialDefault) Code() int {
	return o._statusCode
}

func (o *UpdateMaterialDefault) Error() string {
	return fmt.Sprintf("[PUT /materials/{id}][%d] updateMaterial default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateMaterialDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
