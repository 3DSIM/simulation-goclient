// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// GetThermalSimulationReader is a Reader for the GetThermalSimulation structure.
type GetThermalSimulationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetThermalSimulationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetThermalSimulationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetThermalSimulationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetThermalSimulationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetThermalSimulationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetThermalSimulationDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetThermalSimulationOK creates a GetThermalSimulationOK with default headers values
func NewGetThermalSimulationOK() *GetThermalSimulationOK {
	return &GetThermalSimulationOK{}
}

/*GetThermalSimulationOK handles this case with default header values.

Successfully retrieved simulation
*/
type GetThermalSimulationOK struct {
	Payload *models.ThermalSimulation
}

func (o *GetThermalSimulationOK) Error() string {
	return fmt.Sprintf("[GET /thermalsimulations/{id}][%d] getThermalSimulationOK  %+v", 200, o.Payload)
}

func (o *GetThermalSimulationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ThermalSimulation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetThermalSimulationUnauthorized creates a GetThermalSimulationUnauthorized with default headers values
func NewGetThermalSimulationUnauthorized() *GetThermalSimulationUnauthorized {
	return &GetThermalSimulationUnauthorized{}
}

/*GetThermalSimulationUnauthorized handles this case with default header values.

Not authorized
*/
type GetThermalSimulationUnauthorized struct {
	Payload *models.Error
}

func (o *GetThermalSimulationUnauthorized) Error() string {
	return fmt.Sprintf("[GET /thermalsimulations/{id}][%d] getThermalSimulationUnauthorized  %+v", 401, o.Payload)
}

func (o *GetThermalSimulationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetThermalSimulationForbidden creates a GetThermalSimulationForbidden with default headers values
func NewGetThermalSimulationForbidden() *GetThermalSimulationForbidden {
	return &GetThermalSimulationForbidden{}
}

/*GetThermalSimulationForbidden handles this case with default header values.

Forbidden
*/
type GetThermalSimulationForbidden struct {
	Payload *models.Error
}

func (o *GetThermalSimulationForbidden) Error() string {
	return fmt.Sprintf("[GET /thermalsimulations/{id}][%d] getThermalSimulationForbidden  %+v", 403, o.Payload)
}

func (o *GetThermalSimulationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetThermalSimulationNotFound creates a GetThermalSimulationNotFound with default headers values
func NewGetThermalSimulationNotFound() *GetThermalSimulationNotFound {
	return &GetThermalSimulationNotFound{}
}

/*GetThermalSimulationNotFound handles this case with default header values.

Simulation not found (id invalid)
*/
type GetThermalSimulationNotFound struct {
	Payload *models.Error
}

func (o *GetThermalSimulationNotFound) Error() string {
	return fmt.Sprintf("[GET /thermalsimulations/{id}][%d] getThermalSimulationNotFound  %+v", 404, o.Payload)
}

func (o *GetThermalSimulationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetThermalSimulationDefault creates a GetThermalSimulationDefault with default headers values
func NewGetThermalSimulationDefault(code int) *GetThermalSimulationDefault {
	return &GetThermalSimulationDefault{
		_statusCode: code,
	}
}

/*GetThermalSimulationDefault handles this case with default header values.

unexpected error
*/
type GetThermalSimulationDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get thermal simulation default response
func (o *GetThermalSimulationDefault) Code() int {
	return o._statusCode
}

func (o *GetThermalSimulationDefault) Error() string {
	return fmt.Sprintf("[GET /thermalsimulations/{id}][%d] getThermalSimulation default  %+v", o._statusCode, o.Payload)
}

func (o *GetThermalSimulationDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
