package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// FindMaterialByIDReader is a Reader for the FindMaterialByID structure.
type FindMaterialByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindMaterialByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewFindMaterialByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewFindMaterialByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewFindMaterialByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewFindMaterialByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewFindMaterialByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewFindMaterialByIDOK creates a FindMaterialByIDOK with default headers values
func NewFindMaterialByIDOK() *FindMaterialByIDOK {
	return &FindMaterialByIDOK{}
}

/*FindMaterialByIDOK handles this case with default header values.

material response
*/
type FindMaterialByIDOK struct {
	Payload *models.Material
}

func (o *FindMaterialByIDOK) Error() string {
	return fmt.Sprintf("[GET /materials/{id}][%d] findMaterialByIdOK  %+v", 200, o.Payload)
}

func (o *FindMaterialByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Material)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindMaterialByIDUnauthorized creates a FindMaterialByIDUnauthorized with default headers values
func NewFindMaterialByIDUnauthorized() *FindMaterialByIDUnauthorized {
	return &FindMaterialByIDUnauthorized{}
}

/*FindMaterialByIDUnauthorized handles this case with default header values.

Not authorized
*/
type FindMaterialByIDUnauthorized struct {
	Payload *models.Error
}

func (o *FindMaterialByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /materials/{id}][%d] findMaterialByIdUnauthorized  %+v", 401, o.Payload)
}

func (o *FindMaterialByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindMaterialByIDForbidden creates a FindMaterialByIDForbidden with default headers values
func NewFindMaterialByIDForbidden() *FindMaterialByIDForbidden {
	return &FindMaterialByIDForbidden{}
}

/*FindMaterialByIDForbidden handles this case with default header values.

Forbidden
*/
type FindMaterialByIDForbidden struct {
	Payload *models.Error
}

func (o *FindMaterialByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /materials/{id}][%d] findMaterialByIdForbidden  %+v", 403, o.Payload)
}

func (o *FindMaterialByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindMaterialByIDNotFound creates a FindMaterialByIDNotFound with default headers values
func NewFindMaterialByIDNotFound() *FindMaterialByIDNotFound {
	return &FindMaterialByIDNotFound{}
}

/*FindMaterialByIDNotFound handles this case with default header values.

Material not found
*/
type FindMaterialByIDNotFound struct {
}

func (o *FindMaterialByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /materials/{id}][%d] findMaterialByIdNotFound ", 404)
}

func (o *FindMaterialByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindMaterialByIDDefault creates a FindMaterialByIDDefault with default headers values
func NewFindMaterialByIDDefault(code int) *FindMaterialByIDDefault {
	return &FindMaterialByIDDefault{
		_statusCode: code,
	}
}

/*FindMaterialByIDDefault handles this case with default header values.

unexpected error
*/
type FindMaterialByIDDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the find material by Id default response
func (o *FindMaterialByIDDefault) Code() int {
	return o._statusCode
}

func (o *FindMaterialByIDDefault) Error() string {
	return fmt.Sprintf("[GET /materials/{id}][%d] findMaterialById default  %+v", o._statusCode, o.Payload)
}

func (o *FindMaterialByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
