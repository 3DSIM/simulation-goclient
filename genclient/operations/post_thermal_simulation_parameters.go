// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// NewPostThermalSimulationParams creates a new PostThermalSimulationParams object
// with the default values initialized.
func NewPostThermalSimulationParams() *PostThermalSimulationParams {
	var ()
	return &PostThermalSimulationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostThermalSimulationParamsWithTimeout creates a new PostThermalSimulationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostThermalSimulationParamsWithTimeout(timeout time.Duration) *PostThermalSimulationParams {
	var ()
	return &PostThermalSimulationParams{

		timeout: timeout,
	}
}

// NewPostThermalSimulationParamsWithContext creates a new PostThermalSimulationParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostThermalSimulationParamsWithContext(ctx context.Context) *PostThermalSimulationParams {
	var ()
	return &PostThermalSimulationParams{

		Context: ctx,
	}
}

// NewPostThermalSimulationParamsWithHTTPClient creates a new PostThermalSimulationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostThermalSimulationParamsWithHTTPClient(client *http.Client) *PostThermalSimulationParams {
	var ()
	return &PostThermalSimulationParams{
		HTTPClient: client,
	}
}

/*PostThermalSimulationParams contains all the parameters to send to the API endpoint
for the post thermal simulation operation typically these are written to a http.Request
*/
type PostThermalSimulationParams struct {

	/*ThermalSimulation
	  ThermalSimulation fields required to add a simulation

	*/
	ThermalSimulation *models.ThermalSimulation

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post thermal simulation params
func (o *PostThermalSimulationParams) WithTimeout(timeout time.Duration) *PostThermalSimulationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post thermal simulation params
func (o *PostThermalSimulationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post thermal simulation params
func (o *PostThermalSimulationParams) WithContext(ctx context.Context) *PostThermalSimulationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post thermal simulation params
func (o *PostThermalSimulationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post thermal simulation params
func (o *PostThermalSimulationParams) WithHTTPClient(client *http.Client) *PostThermalSimulationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post thermal simulation params
func (o *PostThermalSimulationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithThermalSimulation adds the thermalSimulation to the post thermal simulation params
func (o *PostThermalSimulationParams) WithThermalSimulation(thermalSimulation *models.ThermalSimulation) *PostThermalSimulationParams {
	o.SetThermalSimulation(thermalSimulation)
	return o
}

// SetThermalSimulation adds the thermalSimulation to the post thermal simulation params
func (o *PostThermalSimulationParams) SetThermalSimulation(thermalSimulation *models.ThermalSimulation) {
	o.ThermalSimulation = thermalSimulation
}

// WriteToRequest writes these params to a swagger request
func (o *PostThermalSimulationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ThermalSimulation != nil {
		if err := r.SetBodyParam(o.ThermalSimulation); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
