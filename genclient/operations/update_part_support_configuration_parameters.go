// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// NewUpdatePartSupportConfigurationParams creates a new UpdatePartSupportConfigurationParams object
// with the default values initialized.
func NewUpdatePartSupportConfigurationParams() *UpdatePartSupportConfigurationParams {
	var ()
	return &UpdatePartSupportConfigurationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdatePartSupportConfigurationParamsWithTimeout creates a new UpdatePartSupportConfigurationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdatePartSupportConfigurationParamsWithTimeout(timeout time.Duration) *UpdatePartSupportConfigurationParams {
	var ()
	return &UpdatePartSupportConfigurationParams{

		timeout: timeout,
	}
}

// NewUpdatePartSupportConfigurationParamsWithContext creates a new UpdatePartSupportConfigurationParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdatePartSupportConfigurationParamsWithContext(ctx context.Context) *UpdatePartSupportConfigurationParams {
	var ()
	return &UpdatePartSupportConfigurationParams{

		Context: ctx,
	}
}

// NewUpdatePartSupportConfigurationParamsWithHTTPClient creates a new UpdatePartSupportConfigurationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdatePartSupportConfigurationParamsWithHTTPClient(client *http.Client) *UpdatePartSupportConfigurationParams {
	var ()
	return &UpdatePartSupportConfigurationParams{
		HTTPClient: client,
	}
}

/*UpdatePartSupportConfigurationParams contains all the parameters to send to the API endpoint
for the update part support configuration operation typically these are written to a http.Request
*/
type UpdatePartSupportConfigurationParams struct {

	/*PartSupportConfiguration
	  PartSupport configuration to update.

	*/
	PartSupportConfiguration *models.PartSupportConfiguration
	/*PartID
	  ID of part

	*/
	PartID int32
	/*SupportConfigurationID
	  ID of support configuration to get

	*/
	SupportConfigurationID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update part support configuration params
func (o *UpdatePartSupportConfigurationParams) WithTimeout(timeout time.Duration) *UpdatePartSupportConfigurationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update part support configuration params
func (o *UpdatePartSupportConfigurationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update part support configuration params
func (o *UpdatePartSupportConfigurationParams) WithContext(ctx context.Context) *UpdatePartSupportConfigurationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update part support configuration params
func (o *UpdatePartSupportConfigurationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update part support configuration params
func (o *UpdatePartSupportConfigurationParams) WithHTTPClient(client *http.Client) *UpdatePartSupportConfigurationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update part support configuration params
func (o *UpdatePartSupportConfigurationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPartSupportConfiguration adds the partSupportConfiguration to the update part support configuration params
func (o *UpdatePartSupportConfigurationParams) WithPartSupportConfiguration(partSupportConfiguration *models.PartSupportConfiguration) *UpdatePartSupportConfigurationParams {
	o.SetPartSupportConfiguration(partSupportConfiguration)
	return o
}

// SetPartSupportConfiguration adds the partSupportConfiguration to the update part support configuration params
func (o *UpdatePartSupportConfigurationParams) SetPartSupportConfiguration(partSupportConfiguration *models.PartSupportConfiguration) {
	o.PartSupportConfiguration = partSupportConfiguration
}

// WithPartID adds the partID to the update part support configuration params
func (o *UpdatePartSupportConfigurationParams) WithPartID(partID int32) *UpdatePartSupportConfigurationParams {
	o.SetPartID(partID)
	return o
}

// SetPartID adds the partId to the update part support configuration params
func (o *UpdatePartSupportConfigurationParams) SetPartID(partID int32) {
	o.PartID = partID
}

// WithSupportConfigurationID adds the supportConfigurationID to the update part support configuration params
func (o *UpdatePartSupportConfigurationParams) WithSupportConfigurationID(supportConfigurationID int32) *UpdatePartSupportConfigurationParams {
	o.SetSupportConfigurationID(supportConfigurationID)
	return o
}

// SetSupportConfigurationID adds the supportConfigurationId to the update part support configuration params
func (o *UpdatePartSupportConfigurationParams) SetSupportConfigurationID(supportConfigurationID int32) {
	o.SupportConfigurationID = supportConfigurationID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdatePartSupportConfigurationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PartSupportConfiguration == nil {
		o.PartSupportConfiguration = new(models.PartSupportConfiguration)
	}

	if err := r.SetBodyParam(o.PartSupportConfiguration); err != nil {
		return err
	}

	// path param partId
	if err := r.SetPathParam("partId", swag.FormatInt32(o.PartID)); err != nil {
		return err
	}

	// path param supportConfigurationId
	if err := r.SetPathParam("supportConfigurationId", swag.FormatInt32(o.SupportConfigurationID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
