// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// NewPostPartSupportParams creates a new PostPartSupportParams object
// with the default values initialized.
func NewPostPartSupportParams() *PostPartSupportParams {
	var ()
	return &PostPartSupportParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostPartSupportParamsWithTimeout creates a new PostPartSupportParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostPartSupportParamsWithTimeout(timeout time.Duration) *PostPartSupportParams {
	var ()
	return &PostPartSupportParams{

		timeout: timeout,
	}
}

// NewPostPartSupportParamsWithContext creates a new PostPartSupportParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostPartSupportParamsWithContext(ctx context.Context) *PostPartSupportParams {
	var ()
	return &PostPartSupportParams{

		Context: ctx,
	}
}

// NewPostPartSupportParamsWithHTTPClient creates a new PostPartSupportParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostPartSupportParamsWithHTTPClient(client *http.Client) *PostPartSupportParams {
	var ()
	return &PostPartSupportParams{
		HTTPClient: client,
	}
}

/*PostPartSupportParams contains all the parameters to send to the API endpoint
for the post part support operation typically these are written to a http.Request
*/
type PostPartSupportParams struct {

	/*PartPost
	  Support to add. First, call parts/:partId/supports/geometryurl to get a PartUploadRequest object. PUT the STL file AmazonS3 with the signed URL. Use the s3Key property as the value of fileLocation. A POST with this object will execute the part processing service.

	*/
	PartPost *models.PartSupportPost
	/*PartID
	  ID of part

	*/
	PartID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post part support params
func (o *PostPartSupportParams) WithTimeout(timeout time.Duration) *PostPartSupportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post part support params
func (o *PostPartSupportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post part support params
func (o *PostPartSupportParams) WithContext(ctx context.Context) *PostPartSupportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post part support params
func (o *PostPartSupportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post part support params
func (o *PostPartSupportParams) WithHTTPClient(client *http.Client) *PostPartSupportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post part support params
func (o *PostPartSupportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPartPost adds the partPost to the post part support params
func (o *PostPartSupportParams) WithPartPost(partPost *models.PartSupportPost) *PostPartSupportParams {
	o.SetPartPost(partPost)
	return o
}

// SetPartPost adds the partPost to the post part support params
func (o *PostPartSupportParams) SetPartPost(partPost *models.PartSupportPost) {
	o.PartPost = partPost
}

// WithPartID adds the partID to the post part support params
func (o *PostPartSupportParams) WithPartID(partID int32) *PostPartSupportParams {
	o.SetPartID(partID)
	return o
}

// SetPartID adds the partId to the post part support params
func (o *PostPartSupportParams) SetPartID(partID int32) {
	o.PartID = partID
}

// WriteToRequest writes these params to a swagger request
func (o *PostPartSupportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PartPost == nil {
		o.PartPost = new(models.PartSupportPost)
	}

	if err := r.SetBodyParam(o.PartPost); err != nil {
		return err
	}

	// path param partId
	if err := r.SetPathParam("partId", swag.FormatInt32(o.PartID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
