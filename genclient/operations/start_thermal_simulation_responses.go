// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// StartThermalSimulationReader is a Reader for the StartThermalSimulation structure.
type StartThermalSimulationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartThermalSimulationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewStartThermalSimulationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewStartThermalSimulationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewStartThermalSimulationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewStartThermalSimulationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewStartThermalSimulationDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewStartThermalSimulationOK creates a StartThermalSimulationOK with default headers values
func NewStartThermalSimulationOK() *StartThermalSimulationOK {
	return &StartThermalSimulationOK{}
}

/*StartThermalSimulationOK handles this case with default header values.

Simulation was successfully started.
*/
type StartThermalSimulationOK struct {
}

func (o *StartThermalSimulationOK) Error() string {
	return fmt.Sprintf("[PUT /thermalsimulations/{id}/start][%d] startThermalSimulationOK ", 200)
}

func (o *StartThermalSimulationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartThermalSimulationUnauthorized creates a StartThermalSimulationUnauthorized with default headers values
func NewStartThermalSimulationUnauthorized() *StartThermalSimulationUnauthorized {
	return &StartThermalSimulationUnauthorized{}
}

/*StartThermalSimulationUnauthorized handles this case with default header values.

Not authorized
*/
type StartThermalSimulationUnauthorized struct {
	Payload *models.Error
}

func (o *StartThermalSimulationUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /thermalsimulations/{id}/start][%d] startThermalSimulationUnauthorized  %+v", 401, o.Payload)
}

func (o *StartThermalSimulationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartThermalSimulationForbidden creates a StartThermalSimulationForbidden with default headers values
func NewStartThermalSimulationForbidden() *StartThermalSimulationForbidden {
	return &StartThermalSimulationForbidden{}
}

/*StartThermalSimulationForbidden handles this case with default header values.

Forbidden
*/
type StartThermalSimulationForbidden struct {
	Payload *models.Error
}

func (o *StartThermalSimulationForbidden) Error() string {
	return fmt.Sprintf("[PUT /thermalsimulations/{id}/start][%d] startThermalSimulationForbidden  %+v", 403, o.Payload)
}

func (o *StartThermalSimulationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartThermalSimulationNotFound creates a StartThermalSimulationNotFound with default headers values
func NewStartThermalSimulationNotFound() *StartThermalSimulationNotFound {
	return &StartThermalSimulationNotFound{}
}

/*StartThermalSimulationNotFound handles this case with default header values.

Simulation not found (id invalid)
*/
type StartThermalSimulationNotFound struct {
	Payload *models.Error
}

func (o *StartThermalSimulationNotFound) Error() string {
	return fmt.Sprintf("[PUT /thermalsimulations/{id}/start][%d] startThermalSimulationNotFound  %+v", 404, o.Payload)
}

func (o *StartThermalSimulationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartThermalSimulationDefault creates a StartThermalSimulationDefault with default headers values
func NewStartThermalSimulationDefault(code int) *StartThermalSimulationDefault {
	return &StartThermalSimulationDefault{
		_statusCode: code,
	}
}

/*StartThermalSimulationDefault handles this case with default header values.

unexpected error
*/
type StartThermalSimulationDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the start thermal simulation default response
func (o *StartThermalSimulationDefault) Code() int {
	return o._statusCode
}

func (o *StartThermalSimulationDefault) Error() string {
	return fmt.Sprintf("[PUT /thermalsimulations/{id}/start][%d] startThermalSimulation default  %+v", o._statusCode, o.Payload)
}

func (o *StartThermalSimulationDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
