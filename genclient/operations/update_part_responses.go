// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// UpdatePartReader is a Reader for the UpdatePart structure.
type UpdatePartReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePartReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdatePartOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewUpdatePartForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdatePartDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdatePartOK creates a UpdatePartOK with default headers values
func NewUpdatePartOK() *UpdatePartOK {
	return &UpdatePartOK{}
}

/*UpdatePartOK handles this case with default header values.

Successfully updated a part
*/
type UpdatePartOK struct {
	Payload *models.Part
}

func (o *UpdatePartOK) Error() string {
	return fmt.Sprintf("[PUT /parts][%d] updatePartOK  %+v", 200, o.Payload)
}

func (o *UpdatePartOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Part)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePartForbidden creates a UpdatePartForbidden with default headers values
func NewUpdatePartForbidden() *UpdatePartForbidden {
	return &UpdatePartForbidden{}
}

/*UpdatePartForbidden handles this case with default header values.

Forbidden
*/
type UpdatePartForbidden struct {
	Payload *models.Error
}

func (o *UpdatePartForbidden) Error() string {
	return fmt.Sprintf("[PUT /parts][%d] updatePartForbidden  %+v", 403, o.Payload)
}

func (o *UpdatePartForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePartDefault creates a UpdatePartDefault with default headers values
func NewUpdatePartDefault(code int) *UpdatePartDefault {
	return &UpdatePartDefault{
		_statusCode: code,
	}
}

/*UpdatePartDefault handles this case with default header values.

unexpected error
*/
type UpdatePartDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the update part default response
func (o *UpdatePartDefault) Code() int {
	return o._statusCode
}

func (o *UpdatePartDefault) Error() string {
	return fmt.Sprintf("[PUT /parts][%d] UpdatePart default  %+v", o._statusCode, o.Payload)
}

func (o *UpdatePartDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
