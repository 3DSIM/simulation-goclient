// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPartSupportGeometryParams creates a new PartSupportGeometryParams object
// with the default values initialized.
func NewPartSupportGeometryParams() *PartSupportGeometryParams {
	var ()
	return &PartSupportGeometryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPartSupportGeometryParamsWithTimeout creates a new PartSupportGeometryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPartSupportGeometryParamsWithTimeout(timeout time.Duration) *PartSupportGeometryParams {
	var ()
	return &PartSupportGeometryParams{

		timeout: timeout,
	}
}

// NewPartSupportGeometryParamsWithContext creates a new PartSupportGeometryParams object
// with the default values initialized, and the ability to set a context for a request
func NewPartSupportGeometryParamsWithContext(ctx context.Context) *PartSupportGeometryParams {
	var ()
	return &PartSupportGeometryParams{

		Context: ctx,
	}
}

// NewPartSupportGeometryParamsWithHTTPClient creates a new PartSupportGeometryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPartSupportGeometryParamsWithHTTPClient(client *http.Client) *PartSupportGeometryParams {
	var ()
	return &PartSupportGeometryParams{
		HTTPClient: client,
	}
}

/*PartSupportGeometryParams contains all the parameters to send to the API endpoint
for the part support geometry operation typically these are written to a http.Request
*/
type PartSupportGeometryParams struct {

	/*PartID
	  ID of part

	*/
	PartID int32
	/*SupportID
	  ID of support

	*/
	SupportID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the part support geometry params
func (o *PartSupportGeometryParams) WithTimeout(timeout time.Duration) *PartSupportGeometryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the part support geometry params
func (o *PartSupportGeometryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the part support geometry params
func (o *PartSupportGeometryParams) WithContext(ctx context.Context) *PartSupportGeometryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the part support geometry params
func (o *PartSupportGeometryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the part support geometry params
func (o *PartSupportGeometryParams) WithHTTPClient(client *http.Client) *PartSupportGeometryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the part support geometry params
func (o *PartSupportGeometryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPartID adds the partID to the part support geometry params
func (o *PartSupportGeometryParams) WithPartID(partID int32) *PartSupportGeometryParams {
	o.SetPartID(partID)
	return o
}

// SetPartID adds the partId to the part support geometry params
func (o *PartSupportGeometryParams) SetPartID(partID int32) {
	o.PartID = partID
}

// WithSupportID adds the supportID to the part support geometry params
func (o *PartSupportGeometryParams) WithSupportID(supportID int32) *PartSupportGeometryParams {
	o.SetSupportID(supportID)
	return o
}

// SetSupportID adds the supportId to the part support geometry params
func (o *PartSupportGeometryParams) SetSupportID(supportID int32) {
	o.SupportID = supportID
}

// WriteToRequest writes these params to a swagger request
func (o *PartSupportGeometryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param partId
	if err := r.SetPathParam("partId", swag.FormatInt32(o.PartID)); err != nil {
		return err
	}

	// path param supportId
	if err := r.SetPathParam("supportId", swag.FormatInt32(o.SupportID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
