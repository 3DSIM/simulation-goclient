package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// ArchivePartReader is a Reader for the ArchivePart structure.
type ArchivePartReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ArchivePartReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewArchivePartOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewArchivePartUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewArchivePartForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewArchivePartNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewArchivePartDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewArchivePartOK creates a ArchivePartOK with default headers values
func NewArchivePartOK() *ArchivePartOK {
	return &ArchivePartOK{}
}

/*ArchivePartOK handles this case with default header values.

Successfully archived a part
*/
type ArchivePartOK struct {
	Payload *models.Part
}

func (o *ArchivePartOK) Error() string {
	return fmt.Sprintf("[PUT /parts/{id}/archive][%d] archivePartOK  %+v", 200, o.Payload)
}

func (o *ArchivePartOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Part)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArchivePartUnauthorized creates a ArchivePartUnauthorized with default headers values
func NewArchivePartUnauthorized() *ArchivePartUnauthorized {
	return &ArchivePartUnauthorized{}
}

/*ArchivePartUnauthorized handles this case with default header values.

Not authorized
*/
type ArchivePartUnauthorized struct {
	Payload *models.Error
}

func (o *ArchivePartUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /parts/{id}/archive][%d] archivePartUnauthorized  %+v", 401, o.Payload)
}

func (o *ArchivePartUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArchivePartForbidden creates a ArchivePartForbidden with default headers values
func NewArchivePartForbidden() *ArchivePartForbidden {
	return &ArchivePartForbidden{}
}

/*ArchivePartForbidden handles this case with default header values.

Forbidden
*/
type ArchivePartForbidden struct {
	Payload *models.Error
}

func (o *ArchivePartForbidden) Error() string {
	return fmt.Sprintf("[PUT /parts/{id}/archive][%d] archivePartForbidden  %+v", 403, o.Payload)
}

func (o *ArchivePartForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArchivePartNotFound creates a ArchivePartNotFound with default headers values
func NewArchivePartNotFound() *ArchivePartNotFound {
	return &ArchivePartNotFound{}
}

/*ArchivePartNotFound handles this case with default header values.

Not Found
*/
type ArchivePartNotFound struct {
}

func (o *ArchivePartNotFound) Error() string {
	return fmt.Sprintf("[PUT /parts/{id}/archive][%d] archivePartNotFound ", 404)
}

func (o *ArchivePartNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewArchivePartDefault creates a ArchivePartDefault with default headers values
func NewArchivePartDefault(code int) *ArchivePartDefault {
	return &ArchivePartDefault{
		_statusCode: code,
	}
}

/*ArchivePartDefault handles this case with default header values.

unexpected error
*/
type ArchivePartDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the archive part default response
func (o *ArchivePartDefault) Code() int {
	return o._statusCode
}

func (o *ArchivePartDefault) Error() string {
	return fmt.Sprintf("[PUT /parts/{id}/archive][%d] ArchivePart default  %+v", o._statusCode, o.Payload)
}

func (o *ArchivePartDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
