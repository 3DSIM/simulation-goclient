package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// StartPorositySimulationReader is a Reader for the StartPorositySimulation structure.
type StartPorositySimulationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartPorositySimulationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewStartPorositySimulationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewStartPorositySimulationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewStartPorositySimulationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewStartPorositySimulationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewStartPorositySimulationDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewStartPorositySimulationOK creates a StartPorositySimulationOK with default headers values
func NewStartPorositySimulationOK() *StartPorositySimulationOK {
	return &StartPorositySimulationOK{}
}

/*StartPorositySimulationOK handles this case with default header values.

Simulation was successfully started.
*/
type StartPorositySimulationOK struct {
}

func (o *StartPorositySimulationOK) Error() string {
	return fmt.Sprintf("[PUT /porositysimulations/{id}/start][%d] startPorositySimulationOK ", 200)
}

func (o *StartPorositySimulationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartPorositySimulationUnauthorized creates a StartPorositySimulationUnauthorized with default headers values
func NewStartPorositySimulationUnauthorized() *StartPorositySimulationUnauthorized {
	return &StartPorositySimulationUnauthorized{}
}

/*StartPorositySimulationUnauthorized handles this case with default header values.

Not authorized
*/
type StartPorositySimulationUnauthorized struct {
	Payload *models.Error
}

func (o *StartPorositySimulationUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /porositysimulations/{id}/start][%d] startPorositySimulationUnauthorized  %+v", 401, o.Payload)
}

func (o *StartPorositySimulationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartPorositySimulationForbidden creates a StartPorositySimulationForbidden with default headers values
func NewStartPorositySimulationForbidden() *StartPorositySimulationForbidden {
	return &StartPorositySimulationForbidden{}
}

/*StartPorositySimulationForbidden handles this case with default header values.

Forbidden
*/
type StartPorositySimulationForbidden struct {
	Payload *models.Error
}

func (o *StartPorositySimulationForbidden) Error() string {
	return fmt.Sprintf("[PUT /porositysimulations/{id}/start][%d] startPorositySimulationForbidden  %+v", 403, o.Payload)
}

func (o *StartPorositySimulationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartPorositySimulationNotFound creates a StartPorositySimulationNotFound with default headers values
func NewStartPorositySimulationNotFound() *StartPorositySimulationNotFound {
	return &StartPorositySimulationNotFound{}
}

/*StartPorositySimulationNotFound handles this case with default header values.

Simulation not found (id invalid)
*/
type StartPorositySimulationNotFound struct {
	Payload *models.Error
}

func (o *StartPorositySimulationNotFound) Error() string {
	return fmt.Sprintf("[PUT /porositysimulations/{id}/start][%d] startPorositySimulationNotFound  %+v", 404, o.Payload)
}

func (o *StartPorositySimulationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartPorositySimulationDefault creates a StartPorositySimulationDefault with default headers values
func NewStartPorositySimulationDefault(code int) *StartPorositySimulationDefault {
	return &StartPorositySimulationDefault{
		_statusCode: code,
	}
}

/*StartPorositySimulationDefault handles this case with default header values.

unexpected error
*/
type StartPorositySimulationDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the start porosity simulation default response
func (o *StartPorositySimulationDefault) Code() int {
	return o._statusCode
}

func (o *StartPorositySimulationDefault) Error() string {
	return fmt.Sprintf("[PUT /porositysimulations/{id}/start][%d] startPorositySimulation default  %+v", o._statusCode, o.Payload)
}

func (o *StartPorositySimulationDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
