package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/simulation-goclient/models"
)

// GetNewPartGeometryUploadURLReader is a Reader for the GetNewPartGeometryUploadURL structure.
type GetNewPartGeometryUploadURLReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNewPartGeometryUploadURLReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetNewPartGeometryUploadURLOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewGetNewPartGeometryUploadURLForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetNewPartGeometryUploadURLDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetNewPartGeometryUploadURLOK creates a GetNewPartGeometryUploadURLOK with default headers values
func NewGetNewPartGeometryUploadURLOK() *GetNewPartGeometryUploadURLOK {
	return &GetNewPartGeometryUploadURLOK{}
}

/*GetNewPartGeometryUploadURLOK handles this case with default header values.

Successfully returns a part geometry url for a new part upload
*/
type GetNewPartGeometryUploadURLOK struct {
	Payload *models.PartUploadRequest
}

func (o *GetNewPartGeometryUploadURLOK) Error() string {
	return fmt.Sprintf("[GET /parts/geometryuploadurl][%d] getNewPartGeometryUploadUrlOK  %+v", 200, o.Payload)
}

func (o *GetNewPartGeometryUploadURLOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PartUploadRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNewPartGeometryUploadURLForbidden creates a GetNewPartGeometryUploadURLForbidden with default headers values
func NewGetNewPartGeometryUploadURLForbidden() *GetNewPartGeometryUploadURLForbidden {
	return &GetNewPartGeometryUploadURLForbidden{}
}

/*GetNewPartGeometryUploadURLForbidden handles this case with default header values.

Not authorized
*/
type GetNewPartGeometryUploadURLForbidden struct {
	Payload *models.Error
}

func (o *GetNewPartGeometryUploadURLForbidden) Error() string {
	return fmt.Sprintf("[GET /parts/geometryuploadurl][%d] getNewPartGeometryUploadUrlForbidden  %+v", 403, o.Payload)
}

func (o *GetNewPartGeometryUploadURLForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNewPartGeometryUploadURLDefault creates a GetNewPartGeometryUploadURLDefault with default headers values
func NewGetNewPartGeometryUploadURLDefault(code int) *GetNewPartGeometryUploadURLDefault {
	return &GetNewPartGeometryUploadURLDefault{
		_statusCode: code,
	}
}

/*GetNewPartGeometryUploadURLDefault handles this case with default header values.

unexpected error
*/
type GetNewPartGeometryUploadURLDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get new part geometry upload Url default response
func (o *GetNewPartGeometryUploadURLDefault) Code() int {
	return o._statusCode
}

func (o *GetNewPartGeometryUploadURLDefault) Error() string {
	return fmt.Sprintf("[GET /parts/geometryuploadurl][%d] getNewPartGeometryUploadUrl default  %+v", o._statusCode, o.Payload)
}

func (o *GetNewPartGeometryUploadURLDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
