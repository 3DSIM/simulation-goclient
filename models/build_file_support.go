// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BuildFileSupport build file support
// swagger:model BuildFileSupport
type BuildFileSupport struct {

	// Id of the buildfile that owns this support record
	// Required: true
	BuildFileID *int32 `json:"buildFileId"`

	// File name of build file support relative to fileBucket
	// Required: true
	FileLocation *string `json:"fileLocation"`

	// Id of the buildfile support
	// Required: true
	ID *int32 `json:"id"`

	// The original file name from the user
	OriginalFileName string `json:"originalFileName,omitempty"`

	// Width of the Part bounding box (in meters), calculated when the part is processed, use 0 for initial post
	SizeX float64 `json:"sizeX,omitempty"`

	// Length of the Part bounding box (in meters), calculated when the part is processed, use 0 for initial post
	SizeY float64 `json:"sizeY,omitempty"`

	// Height of the Part bounding box (in meters), calculated when the part is processed, use 0 for initial post
	SizeZ float64 `json:"sizeZ,omitempty"`

	// type of geometry. Volumeless - thinwall, closed - watertight
	// Required: true
	SupportType *string `json:"supportType"`
}

// Validate validates this build file support
func (m *BuildFileSupport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildFileID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFileLocation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSupportType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildFileSupport) validateBuildFileID(formats strfmt.Registry) error {

	if err := validate.Required("buildFileId", "body", m.BuildFileID); err != nil {
		return err
	}

	return nil
}

func (m *BuildFileSupport) validateFileLocation(formats strfmt.Registry) error {

	if err := validate.Required("fileLocation", "body", m.FileLocation); err != nil {
		return err
	}

	return nil
}

func (m *BuildFileSupport) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var buildFileSupportTypeSupportTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ThinWall","Watertight"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		buildFileSupportTypeSupportTypePropEnum = append(buildFileSupportTypeSupportTypePropEnum, v)
	}
}

const (
	// BuildFileSupportSupportTypeThinWall captures enum value "ThinWall"
	BuildFileSupportSupportTypeThinWall string = "ThinWall"
	// BuildFileSupportSupportTypeWatertight captures enum value "Watertight"
	BuildFileSupportSupportTypeWatertight string = "Watertight"
)

// prop value enum
func (m *BuildFileSupport) validateSupportTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, buildFileSupportTypeSupportTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BuildFileSupport) validateSupportType(formats strfmt.Registry) error {

	if err := validate.Required("supportType", "body", m.SupportType); err != nil {
		return err
	}

	// value enum
	if err := m.validateSupportTypeEnum("supportType", "body", *m.SupportType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuildFileSupport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildFileSupport) UnmarshalBinary(b []byte) error {
	var res BuildFileSupport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
