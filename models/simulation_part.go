// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SimulationPart As-run part related parameters used for a simulation. If the part field is included in a Simulation PUT or POST, it will not be updated.
// swagger:model SimulationPart
type SimulationPart struct {

	// id
	ID int32 `json:"id,omitempty"`

	// part
	Part *Part `json:"part,omitempty"`

	// ID of the associated part
	// Required: true
	PartID *int32 `json:"partId"`

	// Id of the support to use for the simulation. Can be null
	PartSupportID int32 `json:"partSupportId,omitempty"`

	// ID of the associated simulation
	// Required: true
	SimulationID *int32 `json:"simulationId"`

	// support
	Support *PartSupport `json:"support,omitempty"`

	// Smallest x coordinate of the part location on the powder bed in millimeters. The center of the powder bed in the x dimension is assumed to be 0
	// Required: true
	// Maximum: 125
	// Minimum: -125
	XMin *float64 `json:"xMin"`

	// Smallest y coordinate of the part location on the powder bed in millimeters. The center of the powder bed in the y dimension is assumed to be 0
	// Required: true
	// Maximum: 125
	// Minimum: -125
	YMin *float64 `json:"yMin"`

	// Not used at present. This must be set to 0
	// Required: true
	// Maximum: 0
	// Minimum: 0
	ZMin *float64 `json:"zMin"`
}

// Validate validates this simulation part
func (m *SimulationPart) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePart(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePartID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSimulationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSupport(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateXMin(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateYMin(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateZMin(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SimulationPart) validatePart(formats strfmt.Registry) error {

	if swag.IsZero(m.Part) { // not required
		return nil
	}

	if m.Part != nil {

		if err := m.Part.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("part")
			}
			return err
		}
	}

	return nil
}

func (m *SimulationPart) validatePartID(formats strfmt.Registry) error {

	if err := validate.Required("partId", "body", m.PartID); err != nil {
		return err
	}

	return nil
}

func (m *SimulationPart) validateSimulationID(formats strfmt.Registry) error {

	if err := validate.Required("simulationId", "body", m.SimulationID); err != nil {
		return err
	}

	return nil
}

func (m *SimulationPart) validateSupport(formats strfmt.Registry) error {

	if swag.IsZero(m.Support) { // not required
		return nil
	}

	if m.Support != nil {

		if err := m.Support.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("support")
			}
			return err
		}
	}

	return nil
}

func (m *SimulationPart) validateXMin(formats strfmt.Registry) error {

	if err := validate.Required("xMin", "body", m.XMin); err != nil {
		return err
	}

	if err := validate.Minimum("xMin", "body", float64(*m.XMin), -125, false); err != nil {
		return err
	}

	if err := validate.Maximum("xMin", "body", float64(*m.XMin), 125, false); err != nil {
		return err
	}

	return nil
}

func (m *SimulationPart) validateYMin(formats strfmt.Registry) error {

	if err := validate.Required("yMin", "body", m.YMin); err != nil {
		return err
	}

	if err := validate.Minimum("yMin", "body", float64(*m.YMin), -125, false); err != nil {
		return err
	}

	if err := validate.Maximum("yMin", "body", float64(*m.YMin), 125, false); err != nil {
		return err
	}

	return nil
}

func (m *SimulationPart) validateZMin(formats strfmt.Registry) error {

	if err := validate.Required("zMin", "body", m.ZMin); err != nil {
		return err
	}

	if err := validate.Minimum("zMin", "body", float64(*m.ZMin), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("zMin", "body", float64(*m.ZMin), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SimulationPart) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SimulationPart) UnmarshalBinary(b []byte) error {
	var res SimulationPart
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
