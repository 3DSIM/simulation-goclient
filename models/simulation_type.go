// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// SimulationType simulation type
// swagger:model SimulationType
type SimulationType string

const (
	// SimulationTypeSingleBeadSimulation captures enum value "SingleBeadSimulation"
	SimulationTypeSingleBeadSimulation SimulationType = "SingleBeadSimulation"
	// SimulationTypeThermalSimulation captures enum value "ThermalSimulation"
	SimulationTypeThermalSimulation SimulationType = "ThermalSimulation"
	// SimulationTypePorositySimulation captures enum value "PorositySimulation"
	SimulationTypePorositySimulation SimulationType = "PorositySimulation"
	// SimulationTypeAssumedStrainSimulation captures enum value "AssumedStrainSimulation"
	SimulationTypeAssumedStrainSimulation SimulationType = "AssumedStrainSimulation"
	// SimulationTypeScanPatternSimulation captures enum value "ScanPatternSimulation"
	SimulationTypeScanPatternSimulation SimulationType = "ScanPatternSimulation"
)

// for schema
var simulationTypeEnum []interface{}

func init() {
	var res []SimulationType
	if err := json.Unmarshal([]byte(`["SingleBeadSimulation","ThermalSimulation","PorositySimulation","AssumedStrainSimulation","ScanPatternSimulation"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		simulationTypeEnum = append(simulationTypeEnum, v)
	}
}

func (m SimulationType) validateSimulationTypeEnum(path, location string, value SimulationType) error {
	if err := validate.Enum(path, location, value, simulationTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this simulation type
func (m SimulationType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSimulationTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
