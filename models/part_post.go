// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PartPost part post
// swagger:model PartPost
type PartPost struct {

	// Free form description of the part, max 2048 characters
	Description string `json:"description,omitempty"`

	// Remote s3 key of a newly uploaded stl file.  Use parts/geometryurl endpoint to upload the part before calling POST.  Max length 256 characters.
	// Required: true
	FileLocation *string `json:"fileLocation"`

	// Name of the part, max 50 characters
	// Required: true
	Name *string `json:"name"`

	// Id of the organization that owns this part record
	// Required: true
	OrganizationID *int32 `json:"organizationId"`

	// Tags can be used for any purpose. Max length of serialized json is 256 characters.
	Tags []string `json:"tags"`
}

// Validate validates this part post
func (m *PartPost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileLocation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartPost) validateFileLocation(formats strfmt.Registry) error {

	if err := validate.Required("fileLocation", "body", m.FileLocation); err != nil {
		return err
	}

	return nil
}

func (m *PartPost) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *PartPost) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationId", "body", m.OrganizationID); err != nil {
		return err
	}

	return nil
}

func (m *PartPost) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PartPost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PartPost) UnmarshalBinary(b []byte) error {
	var res PartPost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
