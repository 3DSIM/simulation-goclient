// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PartSupportConfiguration part support configuration
// swagger:model PartSupportConfiguration
type PartSupportConfiguration struct {

	// Whether the configuration is archived
	// Required: true
	Archived *bool `json:"archived"`

	// description
	Description string `json:"description,omitempty"`

	// Id of the configuration
	ID int32 `json:"id,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// Id of the part used in the configuration
	// Required: true
	PartID *int32 `json:"partId"`

	// List of sections that are included in the configuration
	PartSupportSections []*PartSupportSection `json:"partSupportSections"`
}

// Validate validates this part support configuration
func (m *PartSupportConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchived(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePartID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePartSupportSections(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartSupportConfiguration) validateArchived(formats strfmt.Registry) error {

	if err := validate.Required("archived", "body", m.Archived); err != nil {
		return err
	}

	return nil
}

func (m *PartSupportConfiguration) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *PartSupportConfiguration) validatePartID(formats strfmt.Registry) error {

	if err := validate.Required("partId", "body", m.PartID); err != nil {
		return err
	}

	return nil
}

func (m *PartSupportConfiguration) validatePartSupportSections(formats strfmt.Registry) error {

	if swag.IsZero(m.PartSupportSections) { // not required
		return nil
	}

	for i := 0; i < len(m.PartSupportSections); i++ {

		if swag.IsZero(m.PartSupportSections[i]) { // not required
			continue
		}

		if m.PartSupportSections[i] != nil {

			if err := m.PartSupportSections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("partSupportSections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PartSupportConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PartSupportConfiguration) UnmarshalBinary(b []byte) error {
	var res PartSupportConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
