package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
	"time"
)

// SimulationActivity simulation activity
// swagger:model SimulationActivity
type SimulationActivity struct {

	// the Amazon SWF activity id
	// Required: true
	ActivityID *string `json:"activityId"`

	// the name of the Amazon SWF activity
	// Required: true
	ActivityName *string `json:"activityName"`

	// completed time stamp
	CompletedAt *time.Time `json:"completedAt,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// id of associated simulation, set server-side, read-only
	// Required: true
	SimulationID *int32 `json:"simulationId"`

	// started time stamp
	StartedAt *time.Time `json:"startedAt,omitempty"`

	// the version of the worker, e.g. 1.9.0
	// Required: true
	WorkerVersion *string `json:"workerVersion"`
}

// Validate validates this simulation activity
func (m *SimulationActivity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivityID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateActivityName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSimulationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWorkerVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SimulationActivity) validateActivityID(formats strfmt.Registry) error {

	if err := validate.Required("activityId", "body", m.ActivityID); err != nil {
		return err
	}

	return nil
}

func (m *SimulationActivity) validateActivityName(formats strfmt.Registry) error {

	if err := validate.Required("activityName", "body", m.ActivityName); err != nil {
		return err
	}

	return nil
}

func (m *SimulationActivity) validateSimulationID(formats strfmt.Registry) error {

	if err := validate.Required("simulationId", "body", m.SimulationID); err != nil {
		return err
	}

	return nil
}

func (m *SimulationActivity) validateWorkerVersion(formats strfmt.Registry) error {

	if err := validate.Required("workerVersion", "body", m.WorkerVersion); err != nil {
		return err
	}

	return nil
}
