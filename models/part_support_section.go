// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PartSupportSection part support section
// swagger:model PartSupportSection
type PartSupportSection struct {

	// Id of the section
	ID int32 `json:"id,omitempty"`

	// part support
	PartSupport *PartSupport `json:"partSupport,omitempty"`

	// Id of the related configuration
	// Required: true
	PartSupportConfigurationID *int32 `json:"partSupportConfigurationId"`

	// Id of the selected support
	// Required: true
	PartSupportID *int32 `json:"partSupportId"`
}

// Validate validates this part support section
func (m *PartSupportSection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePartSupport(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePartSupportConfigurationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePartSupportID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartSupportSection) validatePartSupport(formats strfmt.Registry) error {

	if swag.IsZero(m.PartSupport) { // not required
		return nil
	}

	if m.PartSupport != nil {

		if err := m.PartSupport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partSupport")
			}
			return err
		}
	}

	return nil
}

func (m *PartSupportSection) validatePartSupportConfigurationID(formats strfmt.Registry) error {

	if err := validate.Required("partSupportConfigurationId", "body", m.PartSupportConfigurationID); err != nil {
		return err
	}

	return nil
}

func (m *PartSupportSection) validatePartSupportID(formats strfmt.Registry) error {

	if err := validate.Required("partSupportId", "body", m.PartSupportID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PartSupportSection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PartSupportSection) UnmarshalBinary(b []byte) error {
	var res PartSupportSection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
