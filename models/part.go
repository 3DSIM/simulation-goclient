package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Part part
// swagger:model Part
type Part struct {

	// Designates whether this entity has been archived.
	Archived bool `json:"archived,omitempty"`

	// Describes the availabity of the part. Uploaded - the part has been uploaded.  Processing - the part is being processed.  Available - the part was processed successfully and can be used in simulations.  Error - an error occurred, contact support@3dsim.com.
	Availability string `json:"availability,omitempty"`

	// created time stamp, set server-side, read only
	Created strfmt.DateTime `json:"created,omitempty"`

	// assigned user, set server-side, read only
	CreatedBy string `json:"createdBy,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// Remote path (s3 key) of part. (read only).
	FileLocation string `json:"fileLocation,omitempty"`

	// Id of the part
	// Required: true
	ID *int32 `json:"id"`

	// last modified time stamp, set server-side, read only
	LastModified strfmt.DateTime `json:"lastModified,omitempty"`

	// assigned user, set server-side, read only
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// x location (in meters) where the lower left corner of the bounding box of the part will be placed on the bed, calculated when the part is processed, use 0 for initial post
	LocationX float64 `json:"locationX,omitempty"`

	// y location (in meters) where the lower left corner of the bounding box of the part will be placed on the bed, calculated when the part is processed, use 0 for initial post
	LocationY float64 `json:"locationY,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// Number of triangles in the original STL file, calculated when the part is processed, use 0 for initial post
	NumberOfTriangles int32 `json:"numberOfTriangles,omitempty"`

	// Id of the organization that owns this part record
	// Required: true
	OrganizationID *int32 `json:"organizationId"`

	// Width of the Part bounding box (in meters), calculated when the part is processed, use 0 for initial post
	SizeX float64 `json:"sizeX,omitempty"`

	// Length of the Part bounding box (in meters), calculated when the part is processed, use 0 for initial post
	SizeY float64 `json:"sizeY,omitempty"`

	// Height of the Part bounding box (in meters), calculated when the part is processed, use 0 for initial post
	SizeZ float64 `json:"sizeZ,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// Approximate volume of the Part (in meters^3), calculated when the part is processed, use 0 for initial post
	Volume float64 `json:"volume,omitempty"`
}

// Validate validates this part
func (m *Part) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailability(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var partTypeAvailabilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Uploaded","Processing","Available","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		partTypeAvailabilityPropEnum = append(partTypeAvailabilityPropEnum, v)
	}
}

const (
	// PartAvailabilityUploaded captures enum value "Uploaded"
	PartAvailabilityUploaded string = "Uploaded"
	// PartAvailabilityProcessing captures enum value "Processing"
	PartAvailabilityProcessing string = "Processing"
	// PartAvailabilityAvailable captures enum value "Available"
	PartAvailabilityAvailable string = "Available"
	// PartAvailabilityError captures enum value "Error"
	PartAvailabilityError string = "Error"
)

// prop value enum
func (m *Part) validateAvailabilityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, partTypeAvailabilityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Part) validateAvailability(formats strfmt.Registry) error {

	if swag.IsZero(m.Availability) { // not required
		return nil
	}

	// value enum
	if err := m.validateAvailabilityEnum("availability", "body", m.Availability); err != nil {
		return err
	}

	return nil
}

func (m *Part) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Part) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Part) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationId", "body", m.OrganizationID); err != nil {
		return err
	}

	return nil
}

func (m *Part) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	return nil
}
