// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MicrostructurePoint describes a location at which the microstructure will be evaluated
// swagger:model MicrostructurePoint
type MicrostructurePoint struct {

	// id
	ID int32 `json:"id,omitempty"`

	// User provided name of this point
	// Required: true
	Label *string `json:"label"`

	// Radius of hemispherical volume of interest in mm centered at each X,Y,Z
	// Required: true
	// Maximum: 1.5
	// Minimum: 0.05
	Radius *float64 `json:"radius"`

	// ID of simulation this point belongs to
	// Required: true
	SimulationID *int32 `json:"simulationId"`

	// X coordinate of this point
	// Required: true
	X *float64 `json:"x"`

	// Y coordinate of this point
	// Required: true
	Y *float64 `json:"y"`

	// Z coordinate of this point
	// Required: true
	Z *float64 `json:"z"`
}

// Validate validates this microstructure point
func (m *MicrostructurePoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRadius(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSimulationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateX(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateY(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateZ(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MicrostructurePoint) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *MicrostructurePoint) validateRadius(formats strfmt.Registry) error {

	if err := validate.Required("radius", "body", m.Radius); err != nil {
		return err
	}

	if err := validate.Minimum("radius", "body", float64(*m.Radius), 0.05, false); err != nil {
		return err
	}

	if err := validate.Maximum("radius", "body", float64(*m.Radius), 1.5, false); err != nil {
		return err
	}

	return nil
}

func (m *MicrostructurePoint) validateSimulationID(formats strfmt.Registry) error {

	if err := validate.Required("simulationId", "body", m.SimulationID); err != nil {
		return err
	}

	return nil
}

func (m *MicrostructurePoint) validateX(formats strfmt.Registry) error {

	if err := validate.Required("x", "body", m.X); err != nil {
		return err
	}

	return nil
}

func (m *MicrostructurePoint) validateY(formats strfmt.Registry) error {

	if err := validate.Required("y", "body", m.Y); err != nil {
		return err
	}

	return nil
}

func (m *MicrostructurePoint) validateZ(formats strfmt.Registry) error {

	if err := validate.Required("z", "body", m.Z); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MicrostructurePoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MicrostructurePoint) UnmarshalBinary(b []byte) error {
	var res MicrostructurePoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
