// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Status status
// swagger:model Status
type Status struct {

	// message
	Message string `json:"message,omitempty"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this status
func (m *Status) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var statusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["okay","problem","slow"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		statusTypeStatusPropEnum = append(statusTypeStatusPropEnum, v)
	}
}

const (
	// StatusStatusOkay captures enum value "okay"
	StatusStatusOkay string = "okay"
	// StatusStatusProblem captures enum value "problem"
	StatusStatusProblem string = "problem"
	// StatusStatusSlow captures enum value "slow"
	StatusStatusSlow string = "slow"
)

// prop value enum
func (m *Status) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, statusTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Status) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Status) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Status) UnmarshalBinary(b []byte) error {
	var res Status
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
