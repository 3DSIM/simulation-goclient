package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Simulation simulation
// swagger:model Simulation
type Simulation struct {

	// time stamp, set server-side, read only
	Completed strfmt.DateTime `json:"completed,omitempty"`

	// created time stamp, set server-side, read only
	Created strfmt.DateTime `json:"created,omitempty"`

	// assigned user, set server-side, read only
	CreatedBy string `json:"createdBy,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// last modified time stamp, set server-side, read only
	LastModified strfmt.DateTime `json:"lastModified,omitempty"`

	// assigned user, set server-side, read only
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// ID of the material configuration that was used in the simulation, set server-side, read only
	MaterialConfigurationID int32 `json:"materialConfigurationId,omitempty"`

	// ID of the material to use in the simulation
	MaterialID int32 `json:"materialId,omitempty"`

	// organization Id
	// Required: true
	OrganizationID *int32 `json:"organizationId"`

	// set server-side, read only
	PercentComplete float64 `json:"percentComplete,omitempty"`

	// time stamp, set server-side, read only
	Started strfmt.DateTime `json:"started,omitempty"`

	// set server-side, read only
	StartedBy string `json:"startedBy,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// title
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this simulation
func (m *Simulation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrganizationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Simulation) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationId", "body", m.OrganizationID); err != nil {
		return err
	}

	return nil
}

var simulationTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Draft","Requested","InProgress","Cancelled","Error","Success"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		simulationTypeStatusPropEnum = append(simulationTypeStatusPropEnum, v)
	}
}

const (
	// SimulationStatusDraft captures enum value "Draft"
	SimulationStatusDraft string = "Draft"
	// SimulationStatusRequested captures enum value "Requested"
	SimulationStatusRequested string = "Requested"
	// SimulationStatusInProgress captures enum value "InProgress"
	SimulationStatusInProgress string = "InProgress"
	// SimulationStatusCancelled captures enum value "Cancelled"
	SimulationStatusCancelled string = "Cancelled"
	// SimulationStatusError captures enum value "Error"
	SimulationStatusError string = "Error"
	// SimulationStatusSuccess captures enum value "Success"
	SimulationStatusSuccess string = "Success"
)

// prop value enum
func (m *Simulation) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, simulationTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Simulation) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Simulation) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	return nil
}

func (m *Simulation) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}
