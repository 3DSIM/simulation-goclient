// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SimulationOutput simulation output
// swagger:model SimulationOutput
type SimulationOutput struct {

	// created time stamp
	// Required: true
	CreatedAt *strfmt.DateTime `json:"createdAt"`

	// Location of file, usually an S3 location
	// Required: true
	FileLocation *string `json:"fileLocation"`

	// id of associated simulation, set server-side, read-only
	ID int32 `json:"id,omitempty"`

	// User readable label of what the output contains
	// Required: true
	Label *string `json:"label"`

	// simulation Id
	SimulationID int32 `json:"simulationId,omitempty"`
}

// Validate validates this simulation output
func (m *SimulationOutput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFileLocation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SimulationOutput) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SimulationOutput) validateFileLocation(formats strfmt.Registry) error {

	if err := validate.Required("fileLocation", "body", m.FileLocation); err != nil {
		return err
	}

	return nil
}

func (m *SimulationOutput) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SimulationOutput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SimulationOutput) UnmarshalBinary(b []byte) error {
	var res SimulationOutput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
