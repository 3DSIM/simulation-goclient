package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// SimulationEstimate contains an estimate (in minutes) for running an assumed strain simulation
// swagger:model SimulationEstimate
type SimulationEstimate struct {

	// If the estimate is 0, the description field will contain information on why an estimate could not be calculated
	Description string `json:"description,omitempty"`

	// estimate
	// Required: true
	Estimate *float64 `json:"estimate"`

	// part Id
	// Required: true
	PartID *float64 `json:"partId"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this simulation estimate
func (m *SimulationEstimate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEstimate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePartID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SimulationEstimate) validateEstimate(formats strfmt.Registry) error {

	if err := validate.Required("estimate", "body", m.Estimate); err != nil {
		return err
	}

	return nil
}

func (m *SimulationEstimate) validatePartID(formats strfmt.Registry) error {

	if err := validate.Required("partId", "body", m.PartID); err != nil {
		return err
	}

	return nil
}

func (m *SimulationEstimate) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}
