// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MaterialConfiguration material configuration
// swagger:model MaterialConfiguration
type MaterialConfiguration struct {

	// absorptivity maximum
	AbsorptivityMaximum float64 `json:"absorptivityMaximum,omitempty"`

	// absorptivity minimum
	AbsorptivityMinimum float64 `json:"absorptivityMinimum,omitempty"`

	// absorptivity powder coeff a
	AbsorptivityPowderCoeffA float64 `json:"absorptivityPowderCoeffA,omitempty"`

	// absorptivity powder coeff b
	AbsorptivityPowderCoeffB float64 `json:"absorptivityPowderCoeffB,omitempty"`

	// absorptivity solid coeff a
	AbsorptivitySolidCoeffA float64 `json:"absorptivitySolidCoeffA,omitempty"`

	// absorptivity solid coeff b
	AbsorptivitySolidCoeffB float64 `json:"absorptivitySolidCoeffB,omitempty"`

	// anisotropic strain coefficient parallel
	// Required: true
	AnisotropicStrainCoefficientParallel *float64 `json:"anisotropicStrainCoefficientParallel"`

	// anisotropic strain coefficient perpendicular
	// Required: true
	AnisotropicStrainCoefficientPerpendicular *float64 `json:"anisotropicStrainCoefficientPerpendicular"`

	// anisotropic strain coefficient z
	// Required: true
	AnisotropicStrainCoefficientZ *float64 `json:"anisotropicStrainCoefficientZ"`

	// created time stamp, set server-side, read only field
	// Required: true
	Created *strfmt.DateTime `json:"created"`

	// creating user, set server-side, read only field
	// Required: true
	CreatedBy *string `json:"createdBy"`

	// elastic modulus
	// Required: true
	ElasticModulus *float64 `json:"elasticModulus"`

	// elastic modulus of base
	// Required: true
	ElasticModulusOfBase *float64 `json:"elasticModulusOfBase"`

	// hardening factor
	// Required: true
	HardeningFactor *float64 `json:"hardeningFactor"`

	// material configuration identifier
	ID int32 `json:"id,omitempty"`

	// liquidus temperature
	// Required: true
	LiquidusTemperature *float64 `json:"liquidusTemperature"`

	// Location where the lookup file is stored.  Set server side.  Only used internally.
	LookupFileLocation string `json:"lookupFileLocation,omitempty"`

	// material identifier for this material configuration
	// Required: true
	MaterialID *int32 `json:"materialId"`

	// material yield strength
	// Required: true
	MaterialYieldStrength *float64 `json:"materialYieldStrength"`

	// nucleation constant bulk
	// Required: true
	NucleationConstantBulk *float64 `json:"nucleationConstantBulk"`

	// nucleation constant interface
	// Required: true
	NucleationConstantInterface *float64 `json:"nucleationConstantInterface"`

	// penetration depth maximum
	PenetrationDepthMaximum float64 `json:"penetrationDepthMaximum,omitempty"`

	// penetration depth minimum
	PenetrationDepthMinimum float64 `json:"penetrationDepthMinimum,omitempty"`

	// penetration depth powder coeff a
	PenetrationDepthPowderCoeffA float64 `json:"penetrationDepthPowderCoeffA,omitempty"`

	// penetration depth powder coeff b
	PenetrationDepthPowderCoeffB float64 `json:"penetrationDepthPowderCoeffB,omitempty"`

	// penetration depth solid coeff a
	PenetrationDepthSolidCoeffA float64 `json:"penetrationDepthSolidCoeffA,omitempty"`

	// penetration depth solid coeff b
	PenetrationDepthSolidCoeffB float64 `json:"penetrationDepthSolidCoeffB,omitempty"`

	// poisson ratio
	// Required: true
	PoissonRatio *float64 `json:"poissonRatio"`

	// powder packing density
	PowderPackingDensity float64 `json:"powderPackingDensity,omitempty"`

	// purging gas convection coefficient
	// Required: true
	PurgingGasConvectionCoefficient *float64 `json:"purgingGasConvectionCoefficient"`

	// solid density at room temperature
	// Required: true
	SolidDensityAtRoomTemperature *float64 `json:"solidDensityAtRoomTemperature"`

	// solid specific heat at room temperature
	// Required: true
	SolidSpecificHeatAtRoomTemperature *float64 `json:"solidSpecificHeatAtRoomTemperature"`

	// solid thermal conductivity at room temperature
	// Required: true
	SolidThermalConductivityAtRoomTemperature *float64 `json:"solidThermalConductivityAtRoomTemperature"`

	// solidus temperature
	// Required: true
	SolidusTemperature *float64 `json:"solidusTemperature"`

	// support yield strength ratio
	// Required: true
	SupportYieldStrengthRatio *float64 `json:"supportYieldStrengthRatio"`

	// thermal expansion coefficient
	// Required: true
	ThermalExpansionCoefficient *float64 `json:"thermalExpansionCoefficient"`

	// vaporization temperature
	// Required: true
	VaporizationTemperature *float64 `json:"vaporizationTemperature"`

	// Location where tuning method lookup file is stored. Set server side. Only used internally.
	W0LookupFileLocation string `json:"w0LookupFileLocation,omitempty"`
}

// Validate validates this material configuration
func (m *MaterialConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnisotropicStrainCoefficientParallel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAnisotropicStrainCoefficientPerpendicular(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAnisotropicStrainCoefficientZ(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateElasticModulus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateElasticModulusOfBase(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHardeningFactor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLiquidusTemperature(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMaterialID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMaterialYieldStrength(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNucleationConstantBulk(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNucleationConstantInterface(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePoissonRatio(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePurgingGasConvectionCoefficient(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSolidDensityAtRoomTemperature(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSolidSpecificHeatAtRoomTemperature(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSolidThermalConductivityAtRoomTemperature(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSolidusTemperature(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSupportYieldStrengthRatio(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateThermalExpansionCoefficient(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVaporizationTemperature(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MaterialConfiguration) validateAnisotropicStrainCoefficientParallel(formats strfmt.Registry) error {

	if err := validate.Required("anisotropicStrainCoefficientParallel", "body", m.AnisotropicStrainCoefficientParallel); err != nil {
		return err
	}

	return nil
}

func (m *MaterialConfiguration) validateAnisotropicStrainCoefficientPerpendicular(formats strfmt.Registry) error {

	if err := validate.Required("anisotropicStrainCoefficientPerpendicular", "body", m.AnisotropicStrainCoefficientPerpendicular); err != nil {
		return err
	}

	return nil
}

func (m *MaterialConfiguration) validateAnisotropicStrainCoefficientZ(formats strfmt.Registry) error {

	if err := validate.Required("anisotropicStrainCoefficientZ", "body", m.AnisotropicStrainCoefficientZ); err != nil {
		return err
	}

	return nil
}

func (m *MaterialConfiguration) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	return nil
}

func (m *MaterialConfiguration) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("createdBy", "body", m.CreatedBy); err != nil {
		return err
	}

	return nil
}

func (m *MaterialConfiguration) validateElasticModulus(formats strfmt.Registry) error {

	if err := validate.Required("elasticModulus", "body", m.ElasticModulus); err != nil {
		return err
	}

	return nil
}

func (m *MaterialConfiguration) validateElasticModulusOfBase(formats strfmt.Registry) error {

	if err := validate.Required("elasticModulusOfBase", "body", m.ElasticModulusOfBase); err != nil {
		return err
	}

	return nil
}

func (m *MaterialConfiguration) validateHardeningFactor(formats strfmt.Registry) error {

	if err := validate.Required("hardeningFactor", "body", m.HardeningFactor); err != nil {
		return err
	}

	return nil
}

func (m *MaterialConfiguration) validateLiquidusTemperature(formats strfmt.Registry) error {

	if err := validate.Required("liquidusTemperature", "body", m.LiquidusTemperature); err != nil {
		return err
	}

	return nil
}

func (m *MaterialConfiguration) validateMaterialID(formats strfmt.Registry) error {

	if err := validate.Required("materialId", "body", m.MaterialID); err != nil {
		return err
	}

	return nil
}

func (m *MaterialConfiguration) validateMaterialYieldStrength(formats strfmt.Registry) error {

	if err := validate.Required("materialYieldStrength", "body", m.MaterialYieldStrength); err != nil {
		return err
	}

	return nil
}

func (m *MaterialConfiguration) validateNucleationConstantBulk(formats strfmt.Registry) error {

	if err := validate.Required("nucleationConstantBulk", "body", m.NucleationConstantBulk); err != nil {
		return err
	}

	return nil
}

func (m *MaterialConfiguration) validateNucleationConstantInterface(formats strfmt.Registry) error {

	if err := validate.Required("nucleationConstantInterface", "body", m.NucleationConstantInterface); err != nil {
		return err
	}

	return nil
}

func (m *MaterialConfiguration) validatePoissonRatio(formats strfmt.Registry) error {

	if err := validate.Required("poissonRatio", "body", m.PoissonRatio); err != nil {
		return err
	}

	return nil
}

func (m *MaterialConfiguration) validatePurgingGasConvectionCoefficient(formats strfmt.Registry) error {

	if err := validate.Required("purgingGasConvectionCoefficient", "body", m.PurgingGasConvectionCoefficient); err != nil {
		return err
	}

	return nil
}

func (m *MaterialConfiguration) validateSolidDensityAtRoomTemperature(formats strfmt.Registry) error {

	if err := validate.Required("solidDensityAtRoomTemperature", "body", m.SolidDensityAtRoomTemperature); err != nil {
		return err
	}

	return nil
}

func (m *MaterialConfiguration) validateSolidSpecificHeatAtRoomTemperature(formats strfmt.Registry) error {

	if err := validate.Required("solidSpecificHeatAtRoomTemperature", "body", m.SolidSpecificHeatAtRoomTemperature); err != nil {
		return err
	}

	return nil
}

func (m *MaterialConfiguration) validateSolidThermalConductivityAtRoomTemperature(formats strfmt.Registry) error {

	if err := validate.Required("solidThermalConductivityAtRoomTemperature", "body", m.SolidThermalConductivityAtRoomTemperature); err != nil {
		return err
	}

	return nil
}

func (m *MaterialConfiguration) validateSolidusTemperature(formats strfmt.Registry) error {

	if err := validate.Required("solidusTemperature", "body", m.SolidusTemperature); err != nil {
		return err
	}

	return nil
}

func (m *MaterialConfiguration) validateSupportYieldStrengthRatio(formats strfmt.Registry) error {

	if err := validate.Required("supportYieldStrengthRatio", "body", m.SupportYieldStrengthRatio); err != nil {
		return err
	}

	return nil
}

func (m *MaterialConfiguration) validateThermalExpansionCoefficient(formats strfmt.Registry) error {

	if err := validate.Required("thermalExpansionCoefficient", "body", m.ThermalExpansionCoefficient); err != nil {
		return err
	}

	return nil
}

func (m *MaterialConfiguration) validateVaporizationTemperature(formats strfmt.Registry) error {

	if err := validate.Required("vaporizationTemperature", "body", m.VaporizationTemperature); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MaterialConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MaterialConfiguration) UnmarshalBinary(b []byte) error {
	var res MaterialConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
