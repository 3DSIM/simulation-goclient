package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Machine machine
// swagger:model Machine
type Machine struct {

	// false if not archived, true if archived
	// Required: true
	Archived *bool `json:"archived"`

	// created time stamp, set server-side, read only field
	// Required: true
	Created *strfmt.DateTime `json:"created"`

	// creating user, set server-side, read only field
	// Required: true
	CreatedBy *string `json:"createdBy"`

	// machine description
	// Max Length: 2048
	Description string `json:"description,omitempty"`

	// machine identifier
	// Required: true
	ID *int64 `json:"id"`

	// flag whether it is a core machine or a custom machine
	// Required: true
	IsCore *bool `json:"isCore"`

	// key associated with this machine
	// Required: true
	// Max Length: 16
	Key *string `json:"key"`

	// last modified time stamp, set server-side, read only field
	// Required: true
	LastModified *strfmt.DateTime `json:"lastModified"`

	// modifying user, set server-side, read only field
	// Required: true
	LastModifiedBy *string `json:"lastModifiedBy"`

	// machine configuration
	MachineConfiguration *MachineConfiguration `json:"machineConfiguration,omitempty"`

	// identifier for the active MachineConfiguration for the machine
	// Required: true
	MachineConfigurationID *int64 `json:"machineConfigurationId"`

	// machine name
	// Required: true
	// Max Length: 128
	Name *string `json:"name"`

	// organization identifier
	// Required: true
	OrganizationID *int64 `json:"organizationId"`
}

// Validate validates this machine
func (m *Machine) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchived(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIsCore(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastModifiedBy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMachineConfiguration(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMachineConfigurationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Machine) validateArchived(formats strfmt.Registry) error {

	if err := validate.Required("archived", "body", m.Archived); err != nil {
		return err
	}

	return nil
}

func (m *Machine) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	return nil
}

func (m *Machine) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("createdBy", "body", m.CreatedBy); err != nil {
		return err
	}

	return nil
}

func (m *Machine) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 2048); err != nil {
		return err
	}

	return nil
}

func (m *Machine) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Machine) validateIsCore(formats strfmt.Registry) error {

	if err := validate.Required("isCore", "body", m.IsCore); err != nil {
		return err
	}

	return nil
}

func (m *Machine) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	if err := validate.MaxLength("key", "body", string(*m.Key), 16); err != nil {
		return err
	}

	return nil
}

func (m *Machine) validateLastModified(formats strfmt.Registry) error {

	if err := validate.Required("lastModified", "body", m.LastModified); err != nil {
		return err
	}

	return nil
}

func (m *Machine) validateLastModifiedBy(formats strfmt.Registry) error {

	if err := validate.Required("lastModifiedBy", "body", m.LastModifiedBy); err != nil {
		return err
	}

	return nil
}

func (m *Machine) validateMachineConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.MachineConfiguration) { // not required
		return nil
	}

	if m.MachineConfiguration != nil {

		if err := m.MachineConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("machineConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *Machine) validateMachineConfigurationID(formats strfmt.Registry) error {

	if err := validate.Required("machineConfigurationId", "body", m.MachineConfigurationID); err != nil {
		return err
	}

	return nil
}

func (m *Machine) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 128); err != nil {
		return err
	}

	return nil
}

func (m *Machine) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationId", "body", m.OrganizationID); err != nil {
		return err
	}

	return nil
}
