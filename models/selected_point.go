// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SelectedPoint describes a point
// swagger:model SelectedPoint
type SelectedPoint struct {

	// id
	ID float64 `json:"id,omitempty"`

	// label
	// Required: true
	Label *string `json:"label"`

	// simulation Id
	// Required: true
	SimulationID *float64 `json:"simulationId"`

	// x
	// Required: true
	X *float64 `json:"x"`

	// y
	// Required: true
	Y *float64 `json:"y"`

	// z
	// Required: true
	Z *float64 `json:"z"`
}

// Validate validates this selected point
func (m *SelectedPoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSimulationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateX(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateY(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateZ(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SelectedPoint) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *SelectedPoint) validateSimulationID(formats strfmt.Registry) error {

	if err := validate.Required("simulationId", "body", m.SimulationID); err != nil {
		return err
	}

	return nil
}

func (m *SelectedPoint) validateX(formats strfmt.Registry) error {

	if err := validate.Required("x", "body", m.X); err != nil {
		return err
	}

	return nil
}

func (m *SelectedPoint) validateY(formats strfmt.Registry) error {

	if err := validate.Required("y", "body", m.Y); err != nil {
		return err
	}

	return nil
}

func (m *SelectedPoint) validateZ(formats strfmt.Registry) error {

	if err := validate.Required("z", "body", m.Z); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SelectedPoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SelectedPoint) UnmarshalBinary(b []byte) error {
	var res SelectedPoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
